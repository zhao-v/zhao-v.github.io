<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>灯火不休时(blog.dhbxs.top)</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://blog.dhbxs.top/atom.xml" rel="self"/>
  
  <link href="https://blog.dhbxs.top/"/>
  <updated>2021-04-18T13:45:26.085Z</updated>
  <id>https://blog.dhbxs.top/</id>
  
  <author>
    <name>灯火不休时</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop集群搭建（1主2从）</title>
    <link href="https://blog.dhbxs.top/posts/d06540f2.html"/>
    <id>https://blog.dhbxs.top/posts/d06540f2.html</id>
    <published>2021-04-18T07:54:06.000Z</published>
    <updated>2021-04-18T13:45:26.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>耗时将近1天，终于搭好了Hadoop集群，现做教程分享出来。</p><p>本文基于MacOS Big Sur 11.2.2 操作系统，配置3台CentOS 7 虚拟机，部署Hadoop-2.7.7</p></blockquote><h2 id="安装VMWare-Fusion以及TermiusSSH客户端"><a href="#安装VMWare-Fusion以及TermiusSSH客户端" class="headerlink" title="安装VMWare Fusion以及TermiusSSH客户端"></a>安装VMWare Fusion以及TermiusSSH客户端</h2><ul><li><p><code>VMware Fusion</code>：官网<a href="https://www.vmware.com/cn/products/fusion/fusion-evaluation.html">https://www.vmware.com/cn/products/fusion/fusion-evaluation.html</a></p></li><li><p><code>Termius SSH</code>: 官网<a href="https://www.termius.com/mac-os">https://www.termius.com/mac-os</a></p><p>我这里是通过这2款工具来搭建虚拟机并支持后续操作的，也可以使用其他虚拟机软件和SSH客户端，我是没找到Mac平台上能达到像Windows平台的Xshell那样的SSH工具。另外Mac也可以不使用第三方SSH客户端，毕竟自带的<code>iterm2</code>已经很强大了。</p><p>文末有用mac自带的iterm终端SSH链接Linux主机的命令。</p><p>安装以上软件没什么难度，基本下一步就好。</p></li></ul><h2 id="在虚拟机中安装CentOS-7"><a href="#在虚拟机中安装CentOS-7" class="headerlink" title="在虚拟机中安装CentOS 7"></a>在虚拟机中安装CentOS 7</h2><ul><li><p>本教程所使用的虚拟机是用这个镜像安装的 <code>CentOS-7-x86_64-Minimal-2009.iso</code> </p><p>下载地址：<a href="http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/</a> </p><p>然后选择和我一样的镜像版本下载下来。</p><blockquote><p>之前刚一开始是用的CentOS 8，而且是全量安装，包含各种工具包，还有GUI图形界面，要是同时开三台虚拟机的话，16G内存也不够，主要是GUI图形化窗口消耗了大量内存资源，导致系统卡顿，所以干脆就选择最小化安装了。而且安装后也不需要卸载系统自带的OpenJDK，关键是安装也很快。</p><p>反正Linux玩的就是命令，要什么图形啊，服务器不都是跑的最小内核么？</p></blockquote></li></ul><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><ol><li><p>打开VMware Fusion，如下图，选择新建。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2021/04/18/dEqXbynUBJi7RDY.png" alt="dEqXbynUBJi7RDY"></p></li><li><p>选择从光盘或映像中安装，然后点继续。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418205811051.png" alt="image-20210418205811051"></p></li><li><p>点击使用其他光盘或光盘映像。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418205919425.png" alt="image-20210418205919425"></p></li><li><p>在弹出的对话框中，选择刚刚下载的CentOS 7 iso镜像文件，然后点击打开。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418210055428.png" alt="image-20210418210055428"></p></li><li><p>返回后，点击继续。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418210138690.png" alt="image-20210418210138690"></p></li><li><p>选择UEFI引导，毕竟现在的机子都是UEFI了，传统引导很快就会被淘汰的，不过虚拟机选啥其实无所谓，看心情喽！</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418210251260.png" alt="image-20210418210251260"></p></li><li><p>然后点击自定设置。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418210430002.png" alt="image-20210418210430002"></p></li><li><p>选择一个自己觉得合适的位置，更改个名字，将虚拟机保存，点击存储。<code>最好放到固态硬盘中，加载速度会快些</code></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418210625760.png" alt="image-20210418210625760"></p></li><li><p>在弹出的对话框中，选择处理器和内存，然后更改内存至少为 <code>2048M</code> 。我因为16G内存，所以设置了4G，大一点系统响应速度快一些，如果电脑内存是8G的，那么最好设置 <code>2048M</code> 内存，Linux应为没有图形化界面所以比较省内存，其实 <code>2048M</code> 足够了。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418211124299.png" alt="image-20210418211124299"></p></li><li><p>然后点击显示全部，返回顶层页面，点击硬盘。将硬盘大小设置为 <code>60G</code> ,这里视情况而定，一般至少20G，推荐60G，点击应用。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418211414178.png" alt="image-20210418211414178"></p></li><li><p>最后点击虚拟机的运行按钮，打开虚拟机。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418211546728.png" alt="image-20210418211546728"></p></li><li><p>选择第一项，安装CentOS 7，然后回车等待加载。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418211650207.png" alt="image-20210418211650207"></p></li><li><p>加载完成后，进入安装界面，语言选择中文简体，点击继续。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418211905841.png" alt="image-20210418211905841"></p></li><li><p>然后点击安装位置，以确认全盘安装。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418212009893.png" alt="image-20210418212009893"></p></li><li><p>点击左上角的完成。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418212056274.png" alt="image-20210418212056274"></p></li><li><p>点击网络和主机名，配置网络和主机名。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418212153419.png" alt="image-20210418212153419"></p></li><li><p>按下图示操作,记得拍照记录图示信息。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418212658852.png" alt="image-20210418212658852"></p></li><li><p>然后点击IPv4设置，将方法改为手动，目的是为了固定IP地址，方便以后远程连接以及 <code>Hadoop</code> 集群间的通信。然后点击Add添加地址，将地址栏填为刚刚拍照记录下来的 <code>IPv4</code> 地址，子网掩码同样填刚刚拍下来的子网掩码，网关其实就是路由器的IP了，这里填写刚刚拍下来的默认路由的IP地址。继续修改DNS服务器，我这里用阿里云的公共DNS，将 <code>223.5.5.5,223.6.6.6</code> 复制粘贴到DNS服务器那一栏，然后勾选需要IPv4地址完成这个链接，最后点保存。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418213139120.png" alt="image-20210418213139120"></p></li><li><p>将主机名改为master，我们这里现配置master主机，其余节点后面直接复制虚拟机即可，然后点应用。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418213834765.png" alt="image-20210418213834765"></p></li><li><p>按下图检查配置是否有误，无误请点击完成。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418214010400.png" alt="image-20210418214010400"></p></li><li><p>然后点击开始安装。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418214053618.png" alt="image-20210418214053618"></p><ol start="22"><li><p>在安装的同时，设置ROOT用户和密码，点击ROOT密码，进入设置。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418214120168.png" alt="image-20210418214120168"></p><ol start="23"><li><p>务必记住此密码，我这里设置为 <code>000000</code> 学习使用，简单点无所谓，然后点击2次完成，因为密码过于简单，系统会有提醒。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img@master/uPic/image-20210418214307450.png" alt="image-20210418214307450"></p></li><li></li></ol></li></ol></li></ol><h2 id="配置CentOS-7"><a href="#配置CentOS-7" class="headerlink" title="配置CentOS 7"></a>配置CentOS 7</h2><h2 id="制作免密码登陆"><a href="#制作免密码登陆" class="headerlink" title="制作免密码登陆"></a>制作免密码登陆</h2><h2 id="上传Hadoop-2-7-7和jdk1-8-0-171"><a href="#上传Hadoop-2-7-7和jdk1-8-0-171" class="headerlink" title="上传Hadoop-2.7.7和jdk1.8.0_171"></a>上传Hadoop-2.7.7和jdk1.8.0_171</h2><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><h2 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置Hadoop</h2><h2 id="一行命令开启Hadoop集群"><a href="#一行命令开启Hadoop集群" class="headerlink" title="一行命令开启Hadoop集群"></a>一行命令开启Hadoop集群</h2><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;耗时将近1天，终于搭好了Hadoop集群，现做教程分享出来。&lt;/p&gt;
&lt;p&gt;本文基于MacOS Big Sur 11.2.2 操作系统，配置3台CentOS 7 虚拟机，部署Hadoop-2.7.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="大数据与云计算" scheme="https://blog.dhbxs.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="Hadoop" scheme="https://blog.dhbxs.top/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>传感器覆盖率仿真软件设计</title>
    <link href="https://blog.dhbxs.top/posts/7cb72ad9.html"/>
    <id>https://blog.dhbxs.top/posts/7cb72ad9.html</id>
    <published>2021-01-21T06:10:57.000Z</published>
    <updated>2021-01-27T04:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传感器覆盖率仿真软件设计"><a href="#传感器覆盖率仿真软件设计" class="headerlink" title="传感器覆盖率仿真软件设计"></a>传感器覆盖率仿真软件设计</h1><h2 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h2><ol><li><p>在某一固定大小的方形区域内，以随机位置方式布署多个传感器，计算实际区域覆盖率。以图形方式呈现传感器及其覆盖范围。</p></li><li><p>参数</p><ul><li><p>传感器数量</p></li><li><p>传感器感测半径</p></li></ul></li><li><p>计算理论覆盖率并与实际覆盖率比较</p><ul><li><p>理论覆盖率由公式计算得出</p><p>计算公式如下</p><p>随机分布 (Random Distribution)<br> R : 覆盖率 (Coverage Ratio)<br> n : 传感器数量 (Number of Sensors)<br> r : 感测半径 (Sensing Radius)<br> A : 感测区域面积 (Area)</p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20210121143547.png" alt="传感网覆盖率计算公式" style="zoom: 25%;" /></li><li><p>仿真结果之实际覆盖率应该近似于理论覆盖率</p></li></ul></li><li><p>仿真软件效果截图</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20210121144044.png"></p></li></ol><h2 id="分步设计"><a href="#分步设计" class="headerlink" title="分步设计"></a>分步设计</h2><h3 id="语言及模块选择"><a href="#语言及模块选择" class="headerlink" title="语言及模块选择"></a>语言及模块选择</h3><p>按照截图来看，应该是用GUI编程实现的，常见的GUI有Java的Swing组件，以及Python的Tkinter库，及C++ 的Qt5。Python的Tkinter应该算是比较简单的一种简单的GUI实现方式。所以就采用Tkinter来实现GUI。那么设计语言就是Python了，当然也可以使用HTML +CSS+  JS来实现。</p><p><strong>未完待续</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;传感器覆盖率仿真软件设计&quot;&gt;&lt;a href=&quot;#传感器覆盖率仿真软件设计&quot; class=&quot;headerlink&quot; title=&quot;传感器覆盖率仿真软件设计&quot;&gt;&lt;/a&gt;传感器覆盖率仿真软件设计&lt;/h1&gt;&lt;h2 id=&quot;设计要求&quot;&gt;&lt;a href=&quot;#设计要求&quot; cla</summary>
      
    
    
    
    <category term="物联网" scheme="https://blog.dhbxs.top/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="Python" scheme="https://blog.dhbxs.top/tags/Python/"/>
    
    <category term="课程设计" scheme="https://blog.dhbxs.top/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="ZigBee" scheme="https://blog.dhbxs.top/tags/ZigBee/"/>
    
  </entry>
  
  <entry>
    <title>Python新手小练习</title>
    <link href="https://blog.dhbxs.top/posts/23dcdafc.html"/>
    <id>https://blog.dhbxs.top/posts/23dcdafc.html</id>
    <published>2021-01-14T08:29:11.000Z</published>
    <updated>2021-01-19T14:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python新手小练习"><a href="#Python新手小练习" class="headerlink" title="Python新手小练习"></a>Python新手小练习</h1><h2 id="随机生成20个数"><a href="#随机生成20个数" class="headerlink" title="随机生成20个数"></a>随机生成20个数</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randint(<span class="number">0</span>, <span class="number">50</span>))</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random_list = [random.randint(<span class="number">0</span>, <span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"><span class="built_in">print</span>(random_list)</span><br></pre></td></tr></table></figure><h2 id="随机选出20个整数，偶数位置升序，奇数降序"><a href="#随机选出20个整数，偶数位置升序，奇数降序" class="headerlink" title="随机选出20个整数，偶数位置升序，奇数降序"></a>随机选出20个整数，偶数位置升序，奇数降序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个包含20个随机数的列表、偶数位置升序，奇数位置降序</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">random_list = np.random.randint(<span class="number">0</span>, <span class="number">50</span>, size=<span class="number">20</span>).tolist()</span><br><span class="line">random_list_ou = random_list[::<span class="number">2</span>]</span><br><span class="line">random_list_ji = random_list[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">random_list_ou.sort()</span><br><span class="line">random_list_ji.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(random_list_ou, random_list_ji)</span><br></pre></td></tr></table></figure><h2 id="随机生成20个数，统计其出现的频率"><a href="#随机生成20个数，统计其出现的频率" class="headerlink" title="随机生成20个数，统计其出现的频率"></a>随机生成20个数，统计其出现的频率</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成包含20个随机数的列表，统计每个数字出现的次数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">random_list = np.random.randint(<span class="number">0</span>, <span class="number">50</span>, size=<span class="number">20</span>).tolist()</span><br><span class="line"><span class="comment"># print(random_list)</span></span><br><span class="line">count_dict = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> random_list:</span><br><span class="line">    count_dict.update(&#123;<span class="built_in">str</span>(item): random_list.count(item)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count_dict)</span><br></pre></td></tr></table></figure><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x = [random.randint(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">r = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    r[i] = r.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> r.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d出现%d次&quot;</span> % (k, v))</span><br></pre></td></tr></table></figure><h2 id="生成一个包含50个随机数的列表，删除其中所有的奇数（从后往前删）"><a href="#生成一个包含50个随机数的列表，删除其中所有的奇数（从后往前删）" class="headerlink" title="生成一个包含50个随机数的列表，删除其中所有的奇数（从后往前删）"></a>生成一个包含50个随机数的列表，删除其中所有的奇数（从后往前删）</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个包含50个随机数的列表，并删除其中的奇数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">random_list = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, size=<span class="number">50</span>).tolist()</span><br><span class="line"><span class="comment"># print(random_list)</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> random_list[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> item % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        random_list.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random_list)</span><br></pre></td></tr></table></figure><h3 id="方法二：（感谢一位大佬指正）"><a href="#方法二：（感谢一位大佬指正）" class="headerlink" title="方法二：（感谢一位大佬指正）"></a>方法二：（感谢一位大佬指正）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个包含50个随机数的列表，并删除其中的奇数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random_list = [random.randint(<span class="number">0</span>, <span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line"><span class="comment"># print(random_list)</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> random_list[:]:</span><br><span class="line">    <span class="keyword">if</span> item % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        random_list.remove(item)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random_list)</span><br></pre></td></tr></table></figure><h2 id="判断一个数是否是素数"><a href="#判断一个数是否是素数" class="headerlink" title="判断一个数是否是素数"></a>判断一个数是否是素数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断一个数是否为素数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrimeNumbers</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">int</span>(sqrt(num)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%d不是素数&quot;</span> % num)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d是素数&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isPrimeNumbers(<span class="number">3</span>)</span><br><span class="line">isPrimeNumbers(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h2 id="前十个升序、后十个降序"><a href="#前十个升序、后十个降序" class="headerlink" title="前十个升序、后十个降序"></a>前十个升序、后十个降序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，后10个元素降序排列，并输出结果。</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"></span><br><span class="line">random_list = [random.randint(<span class="number">0</span>, <span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"><span class="comment"># random_list = np.random.randint(0, 50, size=20).tolist()</span></span><br><span class="line"><span class="built_in">print</span>(random_list)</span><br><span class="line">start10 = random_list[:<span class="number">10</span>]</span><br><span class="line">end10 = random_list[<span class="number">10</span>:]</span><br><span class="line">start10.sort()</span><br><span class="line">end10.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(start10, end10)</span><br></pre></td></tr></table></figure><h2 id="判断是否为闰年"><a href="#判断是否为闰年" class="headerlink" title="判断是否为闰年"></a>判断是否为闰年</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写程序，运行后用户输入4位整数作为年份，判断其是否为闰年。如果年份能被400整除，则为闰年；如果年份能被4整除但不能被100整除也为闰年。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isleapYear</span>(<span class="params">year</span>):</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d年为闰年&#x27;</span> % year)</span><br><span class="line">    <span class="keyword">elif</span> (year % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (year % <span class="number">100</span> != <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d年为闰年&#x27;</span> % year)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d年不是闰年&#x27;</span> % year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入年份：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">isleapYear(year)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python新手小练习&quot;&gt;&lt;a href=&quot;#Python新手小练习&quot; class=&quot;headerlink&quot; title=&quot;Python新手小练习&quot;&gt;&lt;/a&gt;Python新手小练习&lt;/h1&gt;&lt;h2 id=&quot;随机生成20个数&quot;&gt;&lt;a href=&quot;#随机生成20个数&quot;</summary>
      
    
    
    
    <category term="Python基础" scheme="https://blog.dhbxs.top/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="期末总结" scheme="https://blog.dhbxs.top/tags/%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/"/>
    
    <category term="Python" scheme="https://blog.dhbxs.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CSS3与HTML5基础学习总结</title>
    <link href="https://blog.dhbxs.top/posts/772e838d.html"/>
    <id>https://blog.dhbxs.top/posts/772e838d.html</id>
    <published>2020-11-30T16:56:00.000Z</published>
    <updated>2020-11-30T16:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这里是p标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .paragraph &#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;paragraph&quot;</span>&gt;</span></span><br><span class="line">    这里是p标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #paragraph &#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;paragraph&quot;</span>&gt;</span></span><br><span class="line">    这里是p标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>同一个id应该只使用一次，最好不要重复使用，用在页面唯一需要修改样式的地方</p></blockquote><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这里是p标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030104626.png" alt="基础选择器总结"></p><h2 id="常见CSS属性设置"><a href="#常见CSS属性设置" class="headerlink" title="常见CSS属性设置"></a>常见CSS属性设置</h2><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>谷歌浏览器默认的字体大小是16px，可以给整个body指定一个字体大小</p></blockquote><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030143521.png" alt="字体粗细"></p><blockquote><p>经常使用数值来设置粗细</p></blockquote><h4 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-style</span>: normal;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030143828.png" alt="文字倾斜"></p><blockquote><p>学会去掉倾斜样式</p></blockquote><h4 id="字体综合设置"><a href="#字体综合设置" class="headerlink" title="字体综合设置"></a>字体综合设置</h4><blockquote><p>一行代码设置字体样式，粗细，大小/高度，以及字体</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &#123;   </span></span><br><span class="line"><span class="css">        <span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</p></blockquote><h4 id="字体总结"><a href="#字体总结" class="headerlink" title="字体总结"></a>字体总结</h4><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030144502.png" alt="字体总结"></p><h3 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h3><h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030150752.png" alt="颜色值"></p><h4 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h4><ul><li>text-align: center; 只能是水平居中，不能上下居中</li><li>text-align: left;左对齐</li><li>text-align: right;右对齐</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: right;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文本划线"><a href="#文本划线" class="headerlink" title="文本划线"></a>文本划线</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: underline;<span class="comment">/*下划线*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: line-through;<span class="comment">/*删除线*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: overline;<span class="comment">/*上划线*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*去掉超链接的下划线*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*让文本的首行缩进20像素*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">text-indent</span>: <span class="number">20px</span>;<span class="comment">/*也可以写-20px，向左缩进*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*表示缩进当前文字俩个大小的距离，单位为em*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">26px</span>;</span></span><br><span class="line">        /*</span><br><span class="line">        行间距包括：  </span><br><span class="line">        上间距</span><br><span class="line">        行高</span><br><span class="line">        下间距</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030153037.png" alt="image-20201030153037485"></p><h4 id="文本属性总结"><a href="#文本属性总结" class="headerlink" title="文本属性总结"></a>文本属性总结</h4><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201030153544.png" alt="文本属性总结"></p><h2 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h2><ol><li>内部样式表（嵌入式）</li><li>行内样式表（行内式）</li><li>外部样式表（链接式）</li></ol><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>:red; </span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            这是一个div标签</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">               <span class="attribute">color</span>:red; </span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h3 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><blockquote><p>外部单独建立CSS文件，然后在HTML文档里引入即可</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入方式总结"><a href="#引入方式总结" class="headerlink" title="引入方式总结"></a>引入方式总结</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/30/zI154i9EZb7ncvJ.png" alt="css引入方式总结"></p><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><ol><li>快速生成HTML结构</li><li>快速生成CSS样式</li></ol><h3 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h3><ol><li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></li><li>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</li><li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li><li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li><li>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</li><li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li><li>如果想要在生成的标签内部写内容可以用  { }  表示</li></ol><h3 id="快速生成CSS样式语法"><a href="#快速生成CSS样式语法" class="headerlink" title="快速生成CSS样式语法"></a>快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p><p>​        1. 比如 w200   按tab  可以 生成  width: 200px;</p><p>​        2. 比如 lh26px   按tab  可以生成  line-height: 26px;</p><h2 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><blockquote><p>选择该标签里所有该后代</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ol里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是ul里的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><blockquote><p>选择离他最近的子元素</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*div a &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            我是亲儿子</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是孙子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        熊大</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        熊二</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h4><blockquote><p><strong>语法：</strong></p><p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p><p>​        a:link    没有点击过的(访问过的)链接<br>​        a:visited    点击过的(访问过的)链接<br>​        a:hover    鼠标经过的那个链接<br>​        a:active    鼠标正在按下还没有弹起鼠标的那个链接</p></blockquote><p><strong>链接伪类选择器注意事项</strong></p><p>​        为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。</p><p>​        记忆法：love hate 或者 lv 包包 hao 。</p><p>​        因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*未被访问的链接*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*已经访问过的*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标经过*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: skyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*活动的链接，鼠标点下去不放开时显示的效果*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        小猪佩奇</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>开发常用如下：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*未被访问的链接*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标经过*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: skyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        小猪佩奇</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="focus-伪类选择器"><a href="#focus-伪类选择器" class="headerlink" title="focus 伪类选择器"></a>focus 伪类选择器</h4><blockquote><p>focus焦点就是光标，一般input标签里的text可以获取到光标，用来修改聚焦到光标后的样式变化</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/rsEctXFPkRmQfvZ.png" alt="1570868930472"></p><h2 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h2><h3 id="1、什么是元素的显示模式"><a href="#1、什么是元素的显示模式" class="headerlink" title="1、什么是元素的显示模式"></a>1、什么是元素的显示模式</h3><p><strong>定义：</strong></p><p>​        元素显示模式就是元素（标签）以什么方式进行显示，比如<div>自己占一行，比如一行可以放多个<span>。</p><p><strong>作用：</strong></p><p>​        网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p><h3 id="2、元素显示模式分类"><a href="#2、元素显示模式分类" class="headerlink" title="2、元素显示模式分类"></a>2、元素显示模式分类</h3><h4 id="2-1-块元素"><a href="#2-1-块元素" class="headerlink" title="2.1 块元素"></a>2.1 块元素</h4><p><strong>常见的块元素</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>div</code> 是最典型的块元素</p></blockquote><p><strong>块级元素的特点</strong>：</p><ul><li>比较霸道，自己独占一行。</li><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的100%。</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li></ul><p><strong>注意</strong></p><p>文字类的元素内不能放块级元素</p><p><strong>例如</strong> </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 标签主要用于存放文字，因此 <span class="tag">&lt;<span class="name">p</span>&gt;</span> 里面不能放块级元素，特别是不能放<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">同理， </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>等都是文字类块级标签，里面也不能放其他块级元素</span><br></pre></td></tr></table></figure><h4 id="2-2-行内元素"><a href="#2-2-行内元素" class="headerlink" title="2.2 行内元素"></a>2.2 行内元素</h4><p> <strong>常见的行内元素：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        <span> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><p><strong>行内元素的特点：</strong></p><ul><li><p>相邻行内元素在一行上，一行可以显示多个。</p></li><li><p>高、宽直接设置是无效的。</p></li><li><p>默认宽度就是它本身内容的宽度。</p></li><li><p>行内元素只能容纳文本或其他行内元素，不能容纳块元素例如div。</p></li></ul><p><strong>注意：</strong><br>        链接里面不能再放链接<br>        特殊情况链接 <a> 里面可以放块级元素，但是给 <a> 转换一下块级模式最安全</p><h4 id="2-3-行内块元素"><a href="#2-3-行内块元素" class="headerlink" title="2.3 行内块元素"></a>2.3 行内块元素</h4><p><strong>常见的行内块标签</strong>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span>、</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p><p><strong>行内块元素的特点</strong>：</p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li><li>一行可以显示多个（行内元素特点）。</li><li>默认宽度就是它本身内容的宽度（行内元素特点）。</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li></ul><h3 id="3、元素显示模式总结"><a href="#3、元素显示模式总结" class="headerlink" title="3、元素显示模式总结"></a>3、元素显示模式总结</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/KfRZYCXF87SW3xE.png" alt="1570870718415"></p><h3 id="4、元素显示模式转换"><a href="#4、元素显示模式转换" class="headerlink" title="4、元素显示模式转换"></a>4、元素显示模式转换</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>:block;<span class="comment">/*转换为块级元素*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>:inline;<span class="comment">/*转换为行内元素*/</span></span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>:inline-block;<span class="comment">/*转换为行内块元素*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、实现块内垂直居中"><a href="#5、实现块内垂直居中" class="headerlink" title="5、实现块内垂直居中"></a>5、实现块内垂直居中</h3><blockquote><p>让文字行高和块元素的高度相同即可，</p><p><code>height: 40px</code></p><p><code>line-height: 40px</code></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小米官网<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*把a转换为块级标签*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#55585a</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*text-align: center;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*鼠标经过*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机 电话卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>电视 盒子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>笔记本 平板<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>出行 穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>智能 路由器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>健康儿童<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>耳机 音箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bgc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1920px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">1080px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019235515.png</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其他说明</strong>：</p><p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p><p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-repeat:repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/Ak7MVaiFj81CBew.png" alt="1570886684882"></p><h3 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-position: top center;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/aUcYJ6SL5Th2tvo.png" alt="image-20201031150908827"></p><p><strong>其他说明：</strong></p><p>1、参数是方位名词</p><p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p><p>​        如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p><p>2、参数是精确单位</p><p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p><p>​        如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</p><p>3、参数是混合单位</p><p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p><h3 id="背景图片固定（背景附着）"><a href="#背景图片固定（背景附着）" class="headerlink" title="背景图片固定（背景附着）"></a>背景图片固定（背景附着）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-attachment: scroll | fixed;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/EDmSrUGzBbvoYOk.png" alt="image-20201031153451950"></p><h3 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h3><p><strong>背景合写样式：</strong></p><p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background: transparent url(image.jpg) repeat-y fixed top;</span><br></pre></td></tr></table></figure><h3 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background: rgba(255,255,255,0.3);</span><br></pre></td></tr></table></figure><h3 id="背景总结"><a href="#背景总结" class="headerlink" title="背景总结"></a>背景总结</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/8pkUYqLhczrKy7B.png" alt="image-20201031154329084"></p><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><blockquote><p>冲突的样式，按就近原则，离使用目标近的使用</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/tuPw5eDvdA3GUry.png" alt="image-20201031161803423"></p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/9jhlGygWtAd7xwb.png" alt="1571490049279"></p><blockquote><p> 子元素可以继承父元素的样式:（text-，font-，line-这些元素开头的可以继承，以及color属性）</p></blockquote><h4 id="行高的用法"><a href="#行高的用法" class="headerlink" title="行高的用法"></a>行高的用法</h4> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">   font: 12px/1.5 Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li><li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li><li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据选择器权重执行</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/gGQp1W6vk9Z2wUr.png" alt="image-20201031163648929"></p><p><strong>优先级注意点:</strong></p><ol><li>权重是有4组数字组成,但是不会有进位。</li><li>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</li><li>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</li><li>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</li><li><code>继承的权重是0</code>， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</li></ol><p>复合选择器标签叠加，但是不会进位</p><ul><li>div ul  li   ——&gt;      0,0,0,3</li><li>.nav ul li   ——&gt;      0,0,1,2</li><li>a:hover      —–—&gt;   0,0,1,1</li><li>.nav a       ——&gt;      0,0,1,1</li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/SmXP6uYajoGQWE4.png" alt="1571492536942"></p><h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框(border)"></a>边框(border)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: border-width || border-style || border-color;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/31/FvqCJuDnsVzxtT2.png" alt="image-20201031191633722"></p><p>边框样式 <strong>border-style</strong> 可以设置如下值：</p><ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线  </li><li>dotted：边框为点线</li></ul><p>四条边框合写：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure><p>每条边框分开写：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;  <span class="comment">/* 只设定上边框， 其余同理 */</span>  </span><br></pre></td></tr></table></figure><h3 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h3><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p><p>2、语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse; </span><br></pre></td></tr></table></figure><p>collapse 单词是合并的意思</p><p>border-collapse: collapse; 表示相邻边框合并在一起</p><h3 id="边框会影响盒子实际大小"><a href="#边框会影响盒子实际大小" class="headerlink" title="边框会影响盒子实际大小"></a>边框会影响盒子实际大小</h3><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p><ul><li>测量盒子大小的时候,不量边框。</li><li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li></ul><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h3><h4 id="内边距的使用方式"><a href="#内边距的使用方式" class="headerlink" title="内边距的使用方式"></a>内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p><p>2、语法：</p><p>合写属性：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/GEaMF3j5RJ1YDy6.png" alt="1571493298248"></p><p>分写属性：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/ATtEI7H5jfQ3aYo.png" alt="1571493260536"></p><h4 id="内边距会影响盒子实际大小"><a href="#内边距会影响盒子实际大小" class="headerlink" title="内边距会影响盒子实际大小"></a>内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p><ol><li>内容和边框有了距离，添加了内边距。</li><li>padding影响了盒子实际大小。</li></ol><p>2、内边距对盒子大小的影响：</p><ul><li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li><li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li></ul><p>3、解决方案：</p><p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h3><h4 id="外边距的使用方式"><a href="#外边距的使用方式" class="headerlink" title="外边距的使用方式"></a>外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p><h4 id="外边距典型应用"><a href="#外边距典型应用" class="headerlink" title="外边距典型应用"></a>外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p><ul><li>盒子必须指定了宽度（width）。</li><li>盒子左右的外边距都设置为 auto 。</li></ul><p>常见的写法，以下三种都可以：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto;   <span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 <code>text-align:center</code> 即可。</p><h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况:</p><p>1、相邻块元素垂直外边距的合并</p><p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/4GxIBSUnKT1bfXp.png" alt="1571494239103"></p><p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p><p>2、嵌套块元素垂直外边距的塌陷</p><p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/va8BHWu1Q5hlfTd.png" alt="1571494373778"></p><p>解决方案：</p><ul><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距。</li><li>可以为父元素添加 <code>overflow:hidden</code>。</li></ul><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>一般不直接用a标签，都是用li标签来做</p><h2 id="其他常用样式"><a href="#其他常用样式" class="headerlink" title="其他常用样式"></a>其他常用样式</h2><h3 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;    </span><br></pre></td></tr></table></figure><ul><li>参数值可以为数值或百分比的形式</li><li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li><li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li><li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset; </span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/Bkb5o9uDvNrAJtW.png" alt="1571541874805"></p><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/8gkwbUG2nmaToHL.png" alt="1571541954222"></p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>​    float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">float</span>: left; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/vr5MnzW6pxfYF23.png" alt="1571543209934"></p><p>浮动属性本来是用来在文字中嵌入图片所用的，就相当于在word文档中插入图片，然后选择文字环绕方式，所以浮动不会遮盖周围文字。</p><ul><li>浮动的元素会具有行内块元素的特性</li><li>浮动元素的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的</li></ul><h3 id="浮动元素经常和标准流父级搭配使用"><a href="#浮动元素经常和标准流父级搭配使用" class="headerlink" title="浮动元素经常和标准流父级搭配使用"></a>浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p><p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p><p> <img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/Jngj9RxP3ihWcdU.png" alt="1571544991989"></p><p><strong>Tips:</strong><br>浮动布局注意点:</p><p>1、浮动和标准流的父盒子搭配。</p><p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p><p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p><p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p><p>注意：</p><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li><li>父级有了高度，就不会影响下面的标准流了</li></ul><h3 id="清除浮动样式"><a href="#清除浮动样式" class="headerlink" title="清除浮动样式"></a>清除浮动样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:属性值;&#125; </span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/eJiwxAF3dWkMXut.png" alt="1571555980419"></p><p>实际应用中， 几乎只用 clear: both;清除浮动的策略是:  闭合浮动。 </p><h3 id="清除浮动的多种方式"><a href="#清除浮动的多种方式" class="headerlink" title="清除浮动的多种方式"></a>清除浮动的多种方式</h3><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p><p>使用方式：</p><p>​        额外标签法会在浮动元素末尾添加一个空的标签。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或者其他标签（如<span class="tag">&lt;<span class="name">br</span> /&gt;</span>等）。</span><br></pre></td></tr></table></figure><p>注意： 要求这个新的空标签必须是块级元素。</p><h3 id="父级添加-overflow-属性"><a href="#父级添加-overflow-属性" class="headerlink" title="父级添加 overflow 属性"></a>父级添加 overflow 属性</h3><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden | auto | scroll;</span><br></pre></td></tr></table></figure><p>优点：代码简洁</p><p>缺点：无法显示溢出的部分</p><p>注意：是给父元素添加代码</p><h3 id="父级添加after伪元素"><a href="#父级添加after伪元素" class="headerlink" title="父级添加after伪元素"></a>父级添加after伪元素</h3><p>:after 方式是额外标签法的升级版。给父元素添加：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;  </span><br><span class="line">  content: <span class="string">&quot;&quot;</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  <span class="comment">/* IE6、7 专有 */</span> </span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>优点：没有增加标签，结构更简单</p><p>缺点：照顾低版本浏览器</p><p>代表网站： 百度、淘宝网、网易等</p><h3 id="父级添加双伪元素"><a href="#父级添加双伪元素" class="headerlink" title="父级添加双伪元素"></a>父级添加双伪元素</h3><p>给父元素添加</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before,.clearfix:after &#123;</span><br><span class="line">  content:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>优点：代码更简洁</p><p>缺点：照顾低版本浏览器</p><p>代表网站：小米、腾讯等</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/11/30/Nfb5WQ2MdvEOl97.png" alt="1571556500074"></p><h2 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h2><p>建议遵循以下顺序：</p><ol><li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li><strong>自身属性</strong>：width / height / margin / padding / border / background</li><li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h2><blockquote><p>定位就是把一些元素随意的固定在任何位置</p></blockquote><p><code>定位 = 定位模式 + 边偏移</code></p><p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><p><code>子绝父相</code></p><h3 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h3><p><code>position</code></p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table><h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><table><thead><tr><th>边偏移属性</th><th align="left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td align="left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td align="left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td align="left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td align="left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><h3 id="定位类型"><a href="#定位类型" class="headerlink" title="定位类型"></a>定位类型</h3><h4 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>:static;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还按标准流显示，一般不用</p></blockquote><h4 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位(relative)"></a>相对定位(relative)</h4><blockquote><p>根据自己原来的位置为准，然后进行移动，即相对原来的位置平移。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>移动之后，原来的位置还是自己的，继续占有原来的位置</strong></p><h4 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位(absolute)"></a>绝对定位(absolute)</h4><blockquote><p>相对于祖先元素进行平移，<code>祖先元素</code>必须同时使用定位才有效，否则以浏览器为准移动，而且以最近一级的定位为基准。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绝对定位不再占有原先的位置，飞的比float高。</p><h4 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位(fixed)"></a>固定定位(fixed)</h4><blockquote><p>以浏览器可视区域为准移动</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>不再保留原来的位置</code></p><p>体会最深的就是各种网页侧边广告</p><p>Tip:(贴到版心盒子右边，不随页面大小改变)</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;<span class="comment">/*先走页面的一半*/</span></span><br><span class="line">    <span class="attribute">margin-left</span>：<span class="number">10px</span>；<span class="comment">/*然后再走版心的一半像素*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位(sticky)"></a>粘性定位(sticky)</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以浏览器的可视窗口为参照点移动，占有原先的位置，使用的时候必须添加top、left、right、bottom、其中的一个才有效。</p><p><strong>兼容性差，一般不用，所见到的相同的网页效果一般都是用JavaScript做的</strong></p><h4 id="定位的叠放次序-z-index"><a href="#定位的叠放次序-z-index" class="headerlink" title="定位的叠放次序(z-index)"></a>定位的叠放次序(z-index)</h4><p>z-index</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;<span class="comment">/*数值越大越靠上，可以为负数*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 如果值相同，则按照书写顺序后来者居上，不能加单位，且只有定位的盒子才有效</p></blockquote><h3 id="定位的拓展"><a href="#定位的拓展" class="headerlink" title="定位的拓展"></a>定位的拓展</h3><p> <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p><h4 id="实现水平居中"><a href="#实现水平居中" class="headerlink" title="实现水平居中"></a>实现水平居中</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现垂直居中"><a href="#实现垂直居中" class="headerlink" title="实现垂直居中"></a>实现垂直居中</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>行内元素加绝对定位或者固定定位，可以直接设置高度和宽度</p></li><li><p>块级元素添加绝对或者固定定位，如果不给宽度和高度，默认就是内容的宽度和高度</p></li><li><p>浮动，绝对定位（固定定位）的元素不会触发外边距合并的问题。</p></li></ol></blockquote><p>浮动的元素不会压住下面标准流的段落或图片，如果是绝对定位或者固定定位会压住段落或图片。</p><p>浮动的最初设计理念是为了实现文字中图片的环绕效果，就好比word中的文字环绕效果</p><h3 id="定位总结"><a href="#定位总结" class="headerlink" title="定位总结"></a>定位总结</h3><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static   静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否   (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><h3 id="定位-position-应用"><a href="#定位-position-应用" class="headerlink" title="定位(position)应用"></a>定位(position)应用</h3><p>一般页面底部的返回顶部按钮摆放</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="comment">/* 1. 走浏览器宽度的一半 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 2. 利用margin 走版心盒子宽度的一半距离 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><ol><li><p>display</p><ul><li><p>display 设置或检索对象是否及如何显示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br></pre></td></tr></table></figure></li><li><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p></li><li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：</p></li></ul></li><li><p>visibility</p><ul><li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">visibility：visible ; 　元素可视</span><br><span class="line"></span><br><span class="line">visibility：hidden; 　  元素隐藏</span><br></pre></td></tr></table></figure></li><li><p>特点：<strong>visibility 隐藏元素后，继续占有原来的位置</strong>。（停职留薪）</p></li><li><p>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden</code></p></li><li><p>如果隐藏元素不想要原来位置， 就用 <code>display：none</code>  (用处更多 重点）</p></li></ul></li><li><p>overflow</p><ul><li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><ul><li> 一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</li><li> 但是如果有定位的盒子， 请慎用<code>overflow:hidden</code>  因为它会隐藏多余的部分。</li></ul></li></ol><h3 id="显示与隐藏总结"><a href="#显示与隐藏总结" class="headerlink" title="显示与隐藏总结"></a>显示与隐藏总结</h3><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display 显示     （重点）</strong></td><td>隐藏对象，不保留位置</td><td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td></tr><tr><td><strong>visibility 可见性 （了解）</strong></td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow 溢出（重点）</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h2 id="精灵图-sprites"><a href="#精灵图-sprites" class="headerlink" title="精灵图(sprites)"></a>精灵图(sprites)</h2><p><strong>精灵图的核心思想就是通过<code>background-position</code>移动一张大图，只显示这张图的一部分</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">215px</span> -<span class="number">141px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体图标-iconfont"><a href="#字体图标-iconfont" class="headerlink" title="字体图标(iconfont)"></a>字体图标(iconfont)</h2><p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p><p>1.字体图标的下载 </p><p>2.字体图标的引入 （引入到我们html页面中）</p><p>3.字体图标的追加 （以后添加新的小图标）</p><h3 id="字体图标的下载"><a href="#字体图标的下载" class="headerlink" title="字体图标的下载"></a>字体图标的下载</h3><p><strong>推荐下载网站：</strong></p><ul><li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io/">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li></ul><p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><ul><li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li></ul><p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p><h3 id="字体图标的引入"><a href="#字体图标的引入" class="headerlink" title="字体图标的引入"></a>字体图标的引入</h3><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p><ol><li><p>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/Mn6rmCVveY54UPb.png" alt="1571520092646"></p></li></ol><ul><li><strong>字体文件格式</strong></li></ul><p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p><p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p><p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p><p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p><p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p><ol start="2"><li>在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过<code>css</code>引入到我们页面中。一定注意字体文件路径的问题</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>html 标签内添加小图标。</p></li><li><p>给标签定义字体。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：务必保证 这个字体和上面@font-face里面的字体保持一致 </p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/ku7hcaZfyDrilBG.png" alt="1571520485350"></p></li></ol><h3 id="字体图标的追加"><a href="#字体图标的追加" class="headerlink" title="字体图标的追加"></a>字体图标的追加</h3><p>只需要将之前下载的图标文件夹里的<code>json</code>文件上传即可在原来的基础上追加</p><h2 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h2><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/exj6VU1SLtuvwbC.png" alt="1571520965966"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-color</span>: red green blue black;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/xsJgkHYvjoT1FOc.png" alt="1571548099631"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.box1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 把上边框宽度调大 */</span></span><br><span class="line">        <span class="comment">/* border-top: 100px solid transparent;</span></span><br><span class="line"><span class="comment">        border-right: 50px solid skyblue; */</span></span><br><span class="line">        <span class="comment">/* 左边和下边的边框宽度设置为0 */</span></span><br><span class="line">        <span class="comment">/* border-bottom: 0 solid blue;</span></span><br><span class="line"><span class="comment">        border-left: 0 solid green; */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 1.只保留右边的边框有颜色 */</span></span><br><span class="line">        <span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">        <span class="comment">/* 2. 样式都是solid */</span></span><br><span class="line">        <span class="attribute">border-style</span>: solid;</span><br><span class="line">        <span class="comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span></span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--京东三角案例参考代码--&gt;</span><br><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">        &lt;title&gt;CSS三角强化的巧妙运用&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            <span class="selector-class">.price</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.miaosha</span> &#123;</span><br><span class="line">                <span class="attribute">position</span>: relative;</span><br><span class="line">                <span class="attribute">float</span>: left;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">background-color</span>:red;</span><br><span class="line">                <span class="attribute">text-align</span>: center;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">                <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">                <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.miaosha</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">                <span class="attribute">position</span>: absolute;</span><br><span class="line">                <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">border-color</span>: transparent <span class="number">#fff</span> transparent transparent;</span><br><span class="line">                <span class="attribute">border-style</span>: solid;</span><br><span class="line">                <span class="attribute">border-width</span>: <span class="number">24px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.origin</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">                <span class="attribute">color</span>: gray;</span><br><span class="line">                <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">        &lt;div class=&quot;price&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;miaosha&quot;&gt;</span><br><span class="line">                ¥<span class="number">1650</span></span><br><span class="line">                &lt;<span class="selector-tag">i</span>&gt;&lt;/<span class="selector-tag">i</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;span class=&quot;origin&quot;&gt;¥5650&lt;/span&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="设置鼠标样式-cursor"><a href="#设置鼠标样式-cursor" class="headerlink" title="设置鼠标样式(cursor)"></a>设置鼠标样式(cursor)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/18NVWitHLMdZ2xF.png" alt="1571521805183"></p><h2 id="文本框轮廓线-outline"><a href="#文本框轮廓线-outline" class="headerlink" title="文本框轮廓线(outline)"></a>文本框轮廓线(outline)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line"> <span class="attribute">outline</span>: none; <span class="comment">/*去掉表单或文本框的轮廓线*/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="防止拖拽文本域-resize"><a href="#防止拖拽文本域-resize" class="headerlink" title="防止拖拽文本域(resize)"></a>防止拖拽文本域(resize)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123; </span><br><span class="line"> <span class="attribute">resize</span>: none;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="vertical-align-属性应用"><a href="#vertical-align-属性应用" class="headerlink" title="vertical-align 属性应用"></a>vertical-align 属性应用</h2><p>用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom </span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/VvY4jQmsFrTatHX.png" alt="1571522040645"><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/u5jpQR6a9HLF2hA.png" alt="1571522023413"></p><h2 id="文字省略号显示"><a href="#文字省略号显示" class="headerlink" title="文字省略号显示"></a>文字省略号显示</h2><h3 id="单行文字"><a href="#单行文字" class="headerlink" title="单行文字"></a>单行文字</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;  （ 默认 <span class="attribute">normal</span> 自动换行）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="多行文字"><a href="#多行文字" class="headerlink" title="多行文字"></a>多行文字</h3><p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于<code>webKit</code>浏览器或移动端（移动端大部分是<code>webkit</code>内核）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><p><strong>推荐让后端人员来做这个效果，因为后端人员可以设置显示多少个字，操作更简单。</strong></p><h1 id="H5新特性"><a href="#H5新特性" class="headerlink" title="H5新特性"></a>H5新特性</h1><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/i9qGHynh4QsT8dI.png" alt="语义化标签"></p><h2 id="多媒体标签-audio、video"><a href="#多媒体标签-audio、video" class="headerlink" title="多媒体标签(audio、video)"></a>多媒体标签(audio、video)</h2><h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>兼容性写法</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line">&lt;/ video &gt;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/LJ6vh2lxKbCESjG.png" alt="video常用属性"></p><p> <strong>在google浏览器上面，默认禁止了自动播放，如果想要自动播放的效果，需要设置 muted属性.</strong></p><h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>兼容性写法</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot;  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 标签。</span><br><span class="line">&lt;/ audio&gt;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/K7aTsRVvYqgOhdL.png" alt="audio常用属性"></p><h2 id="新input标签"><a href="#新input标签" class="headerlink" title="新input标签"></a>新<code>input</code>标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;邮箱: &lt;input type&#x3D;&quot;email&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;网址: &lt;input type&#x3D;&quot;url&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;日期: &lt;input type&#x3D;&quot;date&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;时间: &lt;input type&#x3D;&quot;time&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;数量: &lt;input type&#x3D;&quot;number&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;手机号码: &lt;input type&#x3D;&quot;tel&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;搜索: &lt;input type&#x3D;&quot;search&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;颜色: &lt;input type&#x3D;&quot;color&quot; &#x2F;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span><br><span class="line">        &lt;li&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/o1UteQ3SE6y4JcR.png" alt="新增input表单"></p><h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><h2 id="新增选择器"><a href="#新增选择器" class="headerlink" title="新增选择器"></a>新增选择器</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/RQEdl624KCkVzZv.png" alt="属性选择器"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只选择 type =text 文本框的input 选取出来 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-attr">[class$=data]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类选择器、属性选择器、伪类选择器，权重为 10。</p><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/cbPAGwualnhToxX.png" alt="结构伪类选择器-01"></p><h4 id="E-nth-child-n"><a href="#E-nth-child-n" class="headerlink" title="E:nth-child(n)"></a>E:nth-child(n)</h4><p>匹配到父元素的第n个元素</p><ul><li><p>匹配到父元素的第2个子元素  </p><p><code>ul li:nth-child(2)&#123;&#125;</code></p></li><li><p>匹配到父元素的序号为奇数的子元素</p><p><code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p></li><li><p>匹配到父元素的序号为偶数的子元素</p><p><code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4个字母 ）</p></li><li><p><strong>匹配到父元素的前3个子元素</strong></p><p><code>ul li:nth-child(-n+3)&#123;&#125;</code>    </p><p>选择器中的  <strong>n</strong> 是怎么变化的呢？</p><p>因为 n是从 0 ，1，2，3.. 一直递增</p><p>所以 -n+3 就变成了   </p><ul><li><p>n=0 时   -0+3=3</p></li><li><p>n=1时    -1+3=2</p></li><li><p>n=2时    -2+3=1</p></li><li><p>n=3时    -3+3=0 </p></li><li><p>…</p></li><li><p><code>E:nth-child(n)</code>     匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</p></li><li><p><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</p></li></ul><p>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</p></li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/ArJDQgBcXm6GaIk.png" alt="伪元素"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* div::before 权重是2 */</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="comment">/* 这个content是必须要写的 */</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;我&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;小猪佩奇&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        是</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>before 和 after 创建一个元素，但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：  element::before {}   </li><li>before 和 after 必须有 content 属性 </li><li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素<br>伪元素选择器和标签选择器一样，权重为 1</li></ul><h4 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h4><ol><li><p>字体图标</p><ul><li>结构中定义div盒子</li><li>在style中先申明字体  @font-face</li><li>在style中定义after伪元素 div::after{…}</li><li>在after伪元素中 设置content属性，属性的值就是字体编码</li><li>在after伪元素中 设置font-family的属性</li><li>利用定位的方式，让伪元素定位到相应的位置；记住定位口诀：子绝父相</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="keyword">@font-face</span> &#123;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na&#x27;</span>);</span><br><span class="line">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">                <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">                <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">                <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?1lv3na#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">            <span class="attribute">font-weight</span>: normal;</span><br><span class="line">            <span class="attribute">font-style</span>: normal;</span><br><span class="line">            <span class="attribute">font-display</span>: block;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">            <span class="comment">/* content: &#x27;&#x27;; */</span></span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>清除浮动</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/12/01/6eqby4LQdVJMpKo.png" alt="双伪元素"></p></li></ol><h2 id="固定盒子大小"><a href="#固定盒子大小" class="headerlink" title="固定盒子大小"></a>固定盒子大小</h2><p>CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p><p>可以分成两种情况：</p><ul><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width</li></ul><p>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</p><h2 id="模糊特效-filter"><a href="#模糊特效-filter" class="headerlink" title="模糊特效(filter)"></a>模糊特效(filter)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>:   函数(); </span><br><span class="line">--&gt;  例如： </span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);  </span><br><span class="line">--&gt;  blur模糊处理  数值越大越模糊</span><br></pre></td></tr></table></figure><h2 id="计算盒子宽度-calc-函数"><a href="#计算盒子宽度-calc-函数" class="headerlink" title="计算盒子宽度(calc()函数)"></a>计算盒子宽度(<code>calc()</code>函数)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);<span class="comment">/* &quot;+ - *  /&quot;都可以 */</span></span><br></pre></td></tr></table></figure><h2 id="过渡动画-transition"><a href="#过渡动画-transition" class="headerlink" title="过渡动画(transition)"></a>过渡动画(transition)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br></pre></td></tr></table></figure><ul><li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以</li><li>花费时间： 单位是 秒（必须写单位） 比如 0.5s </li><li>运动曲线： 默认是 ease （可以省略）</li><li>何时开始：单位是 秒（必须写单位）可以设置延迟触发时间  默认是 0s  （可以省略）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS基础&quot;&gt;&lt;a href=&quot;#CSS基础&quot; class=&quot;headerlink&quot; title=&quot;CSS基础&quot;&gt;&lt;/a&gt;CSS基础&lt;/h1&gt;&lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="前端基础" scheme="https://blog.dhbxs.top/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="CSS3" scheme="https://blog.dhbxs.top/tags/CSS3/"/>
    
    <category term="HTML5" scheme="https://blog.dhbxs.top/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>在PyCharm中搭建深度学习环境</title>
    <link href="https://blog.dhbxs.top/posts/37561f92.html"/>
    <id>https://blog.dhbxs.top/posts/37561f92.html</id>
    <published>2020-10-06T04:09:48.000Z</published>
    <updated>2021-04-18T08:02:02.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在PyCharm中搭建深度学习环境-基于win10"><a href="#在PyCharm中搭建深度学习环境-基于win10" class="headerlink" title="在PyCharm中搭建深度学习环境(基于win10)"></a>在PyCharm中搭建深度学习环境(基于win10)</h1><blockquote><p>预备环境：Anaconda3</p><p>搭建环境 ：PyCharm + TensorFlow/TensorFlow-GPU + Keras</p><p>PyCharm Version 2020.2.1</p><p>TensorFlow Version 2.3.1</p><p>Keras Version 2.4.3</p><p>CUDA Version 10.1</p><p>cuDNN Version 7.6</p></blockquote><h2 id="1-用PyCharm新建Python环境"><a href="#1-用PyCharm新建Python环境" class="headerlink" title="1. 用PyCharm新建Python环境"></a>1. 用PyCharm新建Python环境</h2><blockquote><p>需要提前安装好Anaconda 官网下载地址：<a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></p></blockquote><ol><li><p>点击新建项目(New Project)</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/IUaupLynK2qv57g.png"></p></li><li><p>按下图操作</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/8BvFiowD9nTeHLC.png"></p></li></ol><h2 id="2-安装TensorFlow-2-3-1"><a href="#2-安装TensorFlow-2-3-1" class="headerlink" title="2. 安装TensorFlow 2.3.1"></a>2. 安装TensorFlow 2.3.1</h2><ol><li><p>项目搭建好后点击Terminal打开终端</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/TtX8uLNQZWAwEzc.png"></p></li><li><p>输入命令 <code>pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple/</code> ，从清华的镜像源检查pip，确保pip为最新版，目前 <code>pip</code> 最新版为 <code>20.2.3</code> </p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/HvF8tlkiGxYbAwX.png"></p></li><li><p>输入<code>TensorFlow</code>安装命令 <code>pip install tensorflow -i https://pypi.tuna.tsinghua.edu.cn/simple/</code> 安装最新版的 <code>TensorFlow</code>，目前最新版的 <code>TensorFlow</code> 为2.3.1</p></li><li><p>如果上面安装不了或者下载缓慢，可以试试这条命令，切换为阿里镜像源 <code> pip install tensorflow -i https://mirrors.aliyun.com/pypi/simple</code></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/wdEVGcTuOnj8MQY.png"></p></li><li><p>输入以下Python代码运行，验证安装是否成功：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="built_in">print</span>(tf.reduce_sum(tf.random.normal([<span class="number">1000</span>, <span class="number">1000</span>])))</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/nxpKoXGg15NkCOY.png"></p><h3 id="踩坑记录：-DLL-load-failed：找不到指定的模块"><a href="#踩坑记录：-DLL-load-failed：找不到指定的模块" class="headerlink" title="踩坑记录：(DLL load failed：找不到指定的模块)"></a><code>踩坑记录：(DLL load failed：找不到指定的模块)</code></h3><blockquote><p>这里如果报如下图所示错误，是因为vc++ 各种运行库缺失导致的，最简单的解决办法就是下载vc++运行库合集，然后安装就好了，这里给出一个下载链接，不保证官方无毒，请自行斟酌使用。VC++ 运行库合集安装包下载地址：<a href="http://8dx.pc6.com/wwb6/WRYXKHJ2020.10.14.exe">http://8dx.pc6.com/wwb6/WRYXKHJ2020.10.14.exe</a></p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/15/t7FAdo621BTQc4e.png" alt="20201015123933"></p></li></ol><h2 id="3-安装Keras-2-4-3"><a href="#3-安装Keras-2-4-3" class="headerlink" title="3. 安装Keras 2.4.3"></a>3. 安装Keras 2.4.3</h2><ol><li><p>继续在terminal中输入命令安装Keras <code>pip install keras -i https://pypi.tuna.tsinghua.edu.cn/simple/</code>  ，阿里镜像源命令： <code>pip install keras -i https://mirrors.aliyun.com/pypi/simple</code></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/gEoFGLO6DQ23Udq.png"></p></li><li><p>输入一下Python代码，运行无报错则安装成功：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/06/kdBoTvGHZsSmPn7.png"></p><blockquote><p>至此，TensorFlow不带GPU的版本和keras已经安装完成，如需添加GPU支持，请继续如下操作</p></blockquote><h1 id="添加GPU支持"><a href="#添加GPU支持" class="headerlink" title="添加GPU支持"></a>添加GPU支持</h1></li></ol><blockquote><p>以下内容全部基于普通笔记本电脑上的 <code>NVIDIA GeForce MX150</code>  独立显卡平台</p></blockquote><h2 id="1-查找自己平台是否有NVIDIA独立显卡以及是否支持CUDA"><a href="#1-查找自己平台是否有NVIDIA独立显卡以及是否支持CUDA" class="headerlink" title="1. 查找自己平台是否有NVIDIA独立显卡以及是否支持CUDA"></a>1. 查找自己平台是否有NVIDIA独立显卡以及是否支持CUDA</h2><ol><li><p>打开任务管理器查看显卡型号，一般笔记本有核心显卡和独立显卡，找到有 NVIDIA 字样的一般就是英伟达的独立显卡了，接着复制显卡型号即图中的 <code>NVIDIA GeForce MX150</code> 到 NVIDIA 官网查询该型号是否支持 CUDA</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/07/2XSHseNIokwYWfT.png"></p></li><li><p>可以看到如下图所示该显卡是支持CUDA的，所以可以给TensorFlow添加GPU支持</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/07/YaKz7pb3nvwRruB.png"></p></li></ol><h2 id="2-去官网下载CUDA10-1以下的版本"><a href="#2-去官网下载CUDA10-1以下的版本" class="headerlink" title="2. 去官网下载CUDA10.1以下的版本"></a>2. 去官网下载CUDA10.1以下的版本</h2><blockquote><p>目前 TensorFlow 最新版仅支持10.1即以下版本，不要安装最新的 CUDA11 </p><p>cuDNN 仅支持最高7.6版本</p></blockquote><ol><li><p>CUDA 10.1 官网下载链接：<a href="https://developer.nvidia.com/cuda-10.1-download-archive-base?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exelocal">https://developer.nvidia.com/cuda-10.1-download-archive-base?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exelocal</a></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/uIiM1mycQ64wfXb.png" alt="image-20201008000316632"></p></li><li><p>点击 Download 下载（点击一次可能会出现请求失败的 ERROR，重新点击就好了）</p></li><li><p>也可以点击这个链接直接下载，或者将该链接复制到迅雷里可以更快速的下载，实测迅雷能跑到6mb/s：<a href="https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.96_win10.exe">https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.96_win10.exe</a></p></li></ol><h2 id="3-安装CUDA"><a href="#3-安装CUDA" class="headerlink" title="3. 安装CUDA"></a>3. 安装CUDA</h2><ol><li><p>双击打开安装包，点击 ok 加载缓存到临时目录</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/gLsYGVa25zjnrFW.png" alt="img"></p></li><li><p>等待检查系统兼容性，然后点击同意并继续</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/x5IvKP9ZSg7wDbU.png"></p></li><li><p>选择自定义安装</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/hAqKuldTp9Xo3FE.png" alt="img"></p></li><li><p>只勾选如图所示的组件，其余一律不勾选</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/7Ao5DcqtWmbiI93.png" alt="QQ图片20201008003135"></p></li><li><p>依次点击下一步，直至安装即可，默认安装位置尽量不要改动，后续要配置环境变量，如若更改，务必截图保存，以防忘记</p></li></ol><h2 id="4-下载cuDNN并配置环境变量"><a href="#4-下载cuDNN并配置环境变量" class="headerlink" title="4. 下载cuDNN并配置环境变量"></a>4. 下载cuDNN并配置环境变量</h2><ol><li><p>点开此链接下载cuDNN7.6版本：<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse51b">https://developer.nvidia.com/rdp/cudnn-archive#a-collapse51b</a></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/13/JXSjWGFV9zU1IAY.png" alt="image-20201013173822253"></p></li><li><p>将下载的压缩包解压出来，把cuda文件夹复制到C盘根目录</p></li><li><p>将以下路径添加到系统环境变量中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\bin</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\extras\CUPTI\lib64</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include</span><br><span class="line">C:\cuda\bin</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/gRJzVuB18DoWxi9.png" alt="image-20201008190818610"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/zjn4yDHTS2AlU8q.png" alt="image-20201008190936486"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/jNyeWfogHOLmdJn.png" alt="image-20201008191051542"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/LSzJGYpfX5DuHAg.png" alt="image-20201008191243925"></p></li></ol><h2 id="5-运行验证是否支持GPU"><a href="#5-运行验证是否支持GPU" class="headerlink" title="5. 运行验证是否支持GPU"></a>5. 运行验证是否支持GPU</h2><ol><li><p>在上文所建立的pycharm项目中，写入如下Python代码，执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="built_in">print</span>(tf.reduce_sum(tf.random.normal([<span class="number">1000</span>, <span class="number">1000</span>])))</span><br></pre></td></tr></table></figure></li><li><p>出现如下图所示提示即表示安装成功</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/10/08/PXlwZzg3tIMsrWQ.png"></p></li></ol><h1 id="附录：pip命令总结"><a href="#附录：pip命令总结" class="headerlink" title="附录：pip命令总结"></a>附录：<code>pip</code>命令总结</h1><table><thead><tr><th align="center">pip命令示例</th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">pip  download SomePackage[==version]</td><td align="center">下载扩展库的指定版本，不安装</td></tr><tr><td align="center">pip  freeze [&gt; requirements.txt]</td><td align="center">以requirements的格式列出已安装模块</td></tr><tr><td align="center">pip  list</td><td align="center">列出当前已安装的所有模块</td></tr><tr><td align="center">pip  install SomePackage[==version]</td><td align="center">在线安装SomePackage模块的指定版本</td></tr><tr><td align="center">pip  install SomePackage.whl</td><td align="center">通过whl文件离线安装扩展库</td></tr><tr><td align="center">pip  install package1 package2 …</td><td align="center">依次（在线）安装package1、package2等扩展模块</td></tr><tr><td align="center">pip  install -r requirements.txt</td><td align="center">安装requirements.txt文件中指定的扩展库</td></tr><tr><td align="center">pip  install –upgrade SomePackage</td><td align="center">升级SomePackage模块</td></tr><tr><td align="center">pip  uninstall SomePackage[==version]</td><td align="center">卸载SomePackage模块的指定版本</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在PyCharm中搭建深度学习环境-基于win10&quot;&gt;&lt;a href=&quot;#在PyCharm中搭建深度学习环境-基于win10&quot; class=&quot;headerlink&quot; title=&quot;在PyCharm中搭建深度学习环境(基于win10)&quot;&gt;&lt;/a&gt;在PyCharm中搭</summary>
      
    
    
    
    <category term="机器学习" scheme="https://blog.dhbxs.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://blog.dhbxs.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java期末总结</title>
    <link href="https://blog.dhbxs.top/posts/45c3582a.html"/>
    <id>https://blog.dhbxs.top/posts/45c3582a.html</id>
    <published>2020-06-03T10:27:58.000Z</published>
    <updated>2020-12-24T15:14:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java期末考"><a href="#Java期末考" class="headerlink" title="Java期末考"></a><code>Java期末考</code></h1><h2 id="复习脑图"><a href="#复习脑图" class="headerlink" title="复习脑图"></a>复习脑图</h2><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://i.loli.net/2020/06/03/K298dExBoaNzv3f.png"></p><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><hr><ol><li>以下哪个不是Java的原始数据类型（ B ）<br>A、int  B、Boolean  C、float D、char</li><li>若需要定义一个类域或类方法，应使用哪种修饰符？（ A ）<br>A、static B、package  C、private D、public</li><li>给出下面代码，关于该程序以下哪个说法是正确的？（ C ） <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String a[])</span></span>&#123;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);　</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> A、编译时将产生错误 B、编译时正确，运行时将产生错误 C、输出零 D、输出空</li><li>以下哪个关键字可以用来对对象加互斥锁？（ B ）<br> A、transient B、synchronized C、 serialize D、static</li><li>以下代码段执行后的输出结果为（ A ） <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x =－<span class="number">3</span>；</span><br><span class="line"><span class="keyword">int</span> y =－<span class="number">10</span>；</span><br><span class="line">System.out.println(y%x);</span><br></pre></td></tr></table></figure> A、 -1 B、2 C、1 D、3</li></ol><ol start="6"><li><p>有以下程序片段，下列哪个选项不能插入到行1。（ D ）</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interesting</span></span>&#123;</span><br><span class="line"> <span class="comment">//do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> A、import java.awt.*; B、package mypackage; C、class OtherClass{ } D、public class MyClass{ }</p></li><li><p>设有下面两个赋值语句：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = Integer.parseInt(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">b = Integer.valueOf(<span class="string">&quot;12&quot;</span>).intValue();</span><br></pre></td></tr></table></figure><p> 下述说法正确的是（ D ）。<br> A、a是整数类型变量，b是整数类对象。<br> B、a是整数类对象，b是整数类型变量。<br> C、a和b都是整数类对象并且值相等。<br> D、a和b都是整数类型变量并且值相等。</p></li><li><p>类Parent、Child定义如下：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class"></span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">aFun</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function"> IOException </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> 将以下哪种方法插入行6是不合法的。（ A ）<br> A、float aFun(float a, float b){ }<br> B、public int aFun(int a, int b)throws Exception{ }<br> C、public float aFun(float p, float q){ }<br> D、public int aFun(int a, int b)throws IOException{ }</p></li><li><p>在使用interface声明一个接口时，只可以使用（ D ）修饰符修饰该接口。<br> A、private B、protected C、private protected D、public</p></li><li><p>有以下方法的定义，请选择该方法的返回类型（ D ）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ReturnType <span class="title">method</span><span class="params">(<span class="keyword">byte</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">short</span>) x/y*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A、byte B、short C、int D、double</p></li><li><p>关于以下代码段的说法正确的是（ D ）</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">StringBuffer s1=<span class="keyword">new</span> StringBuffer(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(s.equals(s1))</span><br><span class="line">    s1=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(s1.equals(s))</span><br><span class="line">    s=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p> A、第1行编译错误，String的构造器必须明确调用<br> B、第3行编译错误，因为s与s1有不同的类型<br> C、编译成功，但执行时在第5行有异常抛出<br> D、编译成功，过程中也没有异常抛出</p></li><li><p>下列程序段执行后的结果是( A )。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i+=<span class="number">2</span>)&#123;</span><br><span class="line">System.out.print(s.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> A)  aceg B) ACEG C) abcdefg D) ab</p></li><li><p>有整型数组：<code>int[] x=&#123;12,35,8,7,2&#125;;</code>,则调用方法<code>Arrays.sort(x)</code>后，数组x中的元素值依次是( A ).<br>A) 2 7 8 12 35 B) 12 35 8 7 2<br>C) 35 12 8 7 2 D) 8 7 12 35 2</p></li><li><p>下面的程序段创建了BufferedReader类的对象in，以便读取本机c盘my文件夹下的文件1.txt。File构造函数中正确的路径和文件名的表示是( C )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(填代码处);</span><br><span class="line">file =<span class="keyword">new</span> FileReader(f);</span><br><span class="line">in=<span class="keyword">new</span> BufferedReader(file);</span><br></pre></td></tr></table></figure><p>A) “/1.txt” B) “../my/1.txt” C) “c:\\my\\1.txt&quot; D) “c:\ my\1.txt&quot;</p></li><li><p>应用程序的main方法中有以下语句，则输出的结果是 ( A )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1=<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String s2=<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b1=s1.equals(s2);</span><br><span class="line"><span class="keyword">boolean</span> b2=(s1==s2);</span><br><span class="line">System.out.print(b1+<span class="string">&quot; &quot;</span>+b2);</span><br></pre></td></tr></table></figure><p>A)true false B) false true C) true true D)false false</p></li><li><p>应用程序的main方法中有以下语句，则输出的结果是 ( B )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable hashtable=<span class="keyword">new</span> Hashtable();</span><br><span class="line">hashtable.put(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">hashtable.put(<span class="string">&quot;y&quot;</span>,<span class="string">&quot;67890&quot;</span>);</span><br><span class="line">hashtable.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">System.out.println(hashtable.get(<span class="string">&quot;a&quot;</span>));</span><br></pre></td></tr></table></figure><p>A) a B) abcde C) 12345 D) 67890</p></li><li><p>下面程序段执行后b的值是( B )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer integ =<span class="keyword">new</span> Integer(<span class="number">9</span>)；</span><br><span class="line"><span class="keyword">boolean</span> b = integ <span class="keyword">instanceof</span> Object;</span><br></pre></td></tr></table></figure><p>A) 9 B) true C) 1 D) false</p></li><li><p>应用程序Test.java的源程序如下，在命令行键入：<br><code>java Test aaa bb c</code><br>回车后输出的结果是 ( D )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k1=args.length;</span><br><span class="line">        <span class="keyword">int</span> k2=args[<span class="number">1</span>].length();</span><br><span class="line">        System.out.print(k1+<span class="string">&quot; &quot;</span>+k2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A) 3 2 B)1 2 C) 1 3 D) 3 3</p></li><li><p>应用程序的main方法中有以下语句，则输出的结果是 ( )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b[][]=&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b[i].length;j++) &#123;</span><br><span class="line">    sum*=b[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br></pre></td></tr></table></figure><p>A) 32  B)11  C) 2  D) 3    执行结果是0</p></li><li><p>应用程序的main方法中有以下语句，则执行后输出的结果是 ( D )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x=&#123;<span class="number">125</span>,<span class="number">21</span>,<span class="number">5</span>,<span class="number">168</span>,<span class="number">98</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> max=x[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;x.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x[i]&gt; max)</span><br><span class="line">    max =x[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><p>A) 125  B) 5  C) 98  D) 168</p></li><li><p>程序Test.java编译运行后输出的结果是( A )。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String s1=<span class="string">&quot;java&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> z=<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    Test t=<span class="keyword">new</span> Test();</span><br><span class="line">    </span><br><span class="line">    System.out.println(t.s1+z);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>A) java2 B)2 C)没有输出结果 D)java</p></li><li><p>应用程序的main方法中有以下语句，则输出的结果是 ( A )。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1=<span class="string">&quot;0.5&quot;</span>, s2=<span class="string">&quot;12&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> x=Double.parseDouble(s1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> y=Integer.parseInt(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(x+y);</span><br></pre></td></tr></table></figure><p> A) 12.5 B) 120.5 C) 12 D) “12.5”</p></li><li><p>以下哪个方法用于定义线程的执行体？ （ C ）<br> A、 start() B、init() C、run() D、synchronized() </p></li><li><p>有如下代码段:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123; <span class="keyword">if</span>(unsafe())&#123;<span class="comment">//do something...&#125;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(safe())&#123;<span class="comment">//do the other...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中，方法unsafe() 将抛出IOException, 请问可将以下哪项填入第1行？（ D ）<br> A、public IOException methodName()<br> B、public void methodName()<br> C、public void methodName() throw IOException<br> D、public void methodName() throws IOException</p></li><li><p>编译并运行以下程序，以下描述哪个选项是正确的（ D ）</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.equals();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> A、编译通过运行无异常 B、编译通过但运行时出错<br> C、行2出错，不能成功编译 D、不能成功编译，行3出错</p></li><li><p>有语句String s=”hello world”; ，以下操作哪个是不合法的？（ B ）<br> A、int i=s.length(); B、s&gt;&gt;&gt;=3; C、String ts=s.trim(); D、String t=s+”!”;</p></li><li><p>给出如下代码:</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">　　<span class="keyword">private</span> <span class="keyword">int</span> m;</span><br><span class="line">    </span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">　　 　　<span class="comment">// some code\...\</span></span><br><span class="line">    </span><br><span class="line">　　 &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如何使成员变量m 被函数fun()直接访问?（ C ）<br> A、将private int m 改为protected int m<br> B、将private int m 改为 public int m<br> C、将private int m 改为 static int m<br> D、将private int m 改为 int m</p></li><li><p>Java application中的主类需包含main方法，main方法的返回类型是什么？（ void ）</p></li><li><p>设有下面两个赋值语句：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">b = Integer.valueOf(<span class="string">&quot;123&quot;</span>).intValue();</span><br></pre></td></tr></table></figure><p> 下述说法正确的是（ D ）。<br> A、a是整数类型变量，b是整数类对象。B、a是整数类对象，b是整数类型变量。<br> C、a和b都是整数类对象并且值相等。 D、a和b都是整数类型变量并且值相等。</p></li><li><p>关于以下application的说明，正确的是（ C ）。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticStuff</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> x；</span><br><span class="line">  <span class="keyword">static</span> &#123; x+=<span class="number">5</span>；&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String args[ ]）</span><br><span class="line">  &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;x=&quot;</span> + x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123; x/=<span class="number">5</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> A、4行与9行不能通过编译，因为缺少方法名和返回类型<br> B、9行不能通过编译，因为只能有一个静态初始化器<br> C、编译通过，执行结果为：x=1<br> D、能通过编译，但程序运行结果不可预知，因为变量x没有初始化</p></li><li><p>有程序片段如下，以下哪个表示式的结果为true？（ B ）</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Float s=<span class="keyword">new</span> Float(<span class="number">0.1f</span>);</span><br><span class="line">Float t=<span class="keyword">new</span> Float(<span class="number">0.1f</span>);</span><br><span class="line">Double u=<span class="keyword">new</span> Double(<span class="number">0.1</span>);</span><br></pre></td></tr></table></figure><p> A、<code>s==t </code>B、<code>s.equals(t)</code>  C、<code>u.equals(s)</code>  D、<code>t.equals(u)</code></p><h2 id="编程基础题"><a href="#编程基础题" class="headerlink" title="编程基础题"></a>编程基础题</h2></li></ol><hr><ol><li><p>编写一个Java程序在屏幕上输出”你好！”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Exam1</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/6/3 下午 1:22</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">&quot;你好!&quot;</span>);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写一个Java程序，用if-else语句判断某年份是否为闰年。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line">   <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> exam2</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2020/6/3 下午 1:32</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam2</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    </span><br><span class="line">           System.out.println(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">int</span> year = in.nextInt();</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)&#123;</span><br><span class="line">    </span><br><span class="line">               System.out.println(year + <span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">    </span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    </span><br><span class="line">               System.out.println(year + <span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">    </span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">               System.out.println(year + <span class="string">&quot;不是闰年&quot;</span>);</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写一个Java程序在屏幕上输出1！+2！+3！+……+10！的和。（p64,例2-2）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Exam3</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/6/3 下午 1:42</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> multiply = <span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">       </span><br><span class="line">            multiply *= i;</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> multiply;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">       </span><br><span class="line">            sum += factorial(i);</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        System.out.println(sum);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个表示学生信息的类Student，要求如下：</p><p>（1）类Student的成员变量：<br>​    sNO　表示学号；sName表示姓名；sSex表示性别；sAge表示年龄；sJava：表示Java课程成绩。<br>（2）类Student带参数的构造方法：<br>​    在构造方法中通过形参完成对成员变量的赋值操作。<br>（3）类Student的方法成员：<br>​    getNo（）：获得学号；<br>​    getName（）：获得姓名；<br>​    getSex（）：获得性别；<br>​    getAge（）获得年龄；<br>​    getJava（）：获得Java 课程成绩<br>​    根据类Student的定义，创建五个该类的对象，输出每个学生的信息，计算并输出这五个学生Java语言成绩的平均值，以及计算并输出他们Java语言成绩的最大值和最小值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam4;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Student</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2020/6/3 下午 2:01</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String sNo;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">private</span> String sName;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">private</span> String sSex;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> sAge;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> sJava;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getsNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> sNo;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsNo</span><span class="params">(String sNo)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">this</span>.sNo = sNo;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getsName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> sName;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsName</span><span class="params">(String sName)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">this</span>.sName = sName;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getsSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> sSex;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsSex</span><span class="params">(String sSex)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">this</span>.sSex = sSex;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getsAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> sAge;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsAge</span><span class="params">(<span class="keyword">int</span> sAge)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">this</span>.sAge = sAge;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getsJava</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> sJava;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsJava</span><span class="params">(<span class="keyword">int</span> sJava)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">this</span>.sJava = sJava;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAll</span><span class="params">(String sNo, String sName, String sSex, <span class="keyword">int</span> sAge, <span class="keyword">int</span> sJava)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           setsNo(sNo);</span><br><span class="line">    </span><br><span class="line">           setsName(sName);</span><br><span class="line">    </span><br><span class="line">           setsSex(sSex);</span><br><span class="line">    </span><br><span class="line">           setsAge(sAge);</span><br><span class="line">    </span><br><span class="line">           setsJava(sJava);</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">    </span><br><span class="line">                   <span class="string">&quot;学号&#x27;&quot;</span> + sNo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">    </span><br><span class="line">                   <span class="string">&quot;, 姓名&#x27;&quot;</span> + sName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">    </span><br><span class="line">                   <span class="string">&quot;, 性别&#x27;&quot;</span> + sSex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">    </span><br><span class="line">                   <span class="string">&quot;, 年龄&quot;</span> + sAge +</span><br><span class="line">    </span><br><span class="line">                   <span class="string">&quot;, Java成绩&quot;</span> + sJava +</span><br><span class="line">    </span><br><span class="line">                   <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">if</span> (array.length == <span class="number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line">               <span class="keyword">return</span> array;</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">    </span><br><span class="line">                   <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">    </span><br><span class="line">                       <span class="keyword">int</span> temp = array[j + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">                       array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">    </span><br><span class="line">                       array[j] = temp;</span><br><span class="line">    </span><br><span class="line">                   &#125;</span><br><span class="line">    </span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">return</span> array;</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">           Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">           Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">           Student s4 = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">           Student s5 = <span class="keyword">new</span> Student();</span><br><span class="line">   </span><br><span class="line">        s1.setAll(<span class="string">&quot;001&quot;</span>, <span class="string">&quot;甲&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">           s2.setAll(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;乙&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">19</span>, <span class="number">99</span>);</span><br><span class="line">    </span><br><span class="line">           s3.setAll(<span class="string">&quot;003&quot;</span>, <span class="string">&quot;丙&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>, <span class="number">98</span>);</span><br><span class="line">    </span><br><span class="line">           s4.setAll(<span class="string">&quot;004&quot;</span>, <span class="string">&quot;丁&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">19</span>, <span class="number">99</span>);</span><br><span class="line">    </span><br><span class="line">           s5.setAll(<span class="string">&quot;005&quot;</span>, <span class="string">&quot;戊&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">   </span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    </span><br><span class="line">           System.out.println(s2);</span><br><span class="line">    </span><br><span class="line">           System.out.println(s3);</span><br><span class="line">    </span><br><span class="line">           System.out.println(s4);</span><br><span class="line">    </span><br><span class="line">           System.out.println(s5);</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">double</span> total = <span class="number">5.0</span>;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">double</span> avg = (s1.getsJava() + s2.getsJava() + s3.getsJava() + s4.getsJava() + s5.getsJava()) / total;</span><br><span class="line">    </span><br><span class="line">           System.out.printf(<span class="string">&quot;平均成绩: %.2f\n&quot;</span>, avg);</span><br><span class="line">           <span class="keyword">int</span>[] score = &#123;s1.getsJava(), s2.getsJava(), s3.getsJava(), s4.getsJava(), s5.getsJava()&#125;;</span><br><span class="line">           <span class="keyword">int</span>[] sortScore = bubbleSort(score);;</span><br><span class="line">           System.out.println(<span class="string">&quot;Java最高成绩:&quot;</span> + sortScore[sortScore.length - <span class="number">1</span>] + <span class="string">&quot; Java最低成绩:&quot;</span> + sortScore[<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>题目：判断101-200之间有多少个素数，并输出所有素数。</p><p>程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除， 则表明此数不是素数，反之是素数。   </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> exam;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Exam5</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2020/6/3 下午 2:43</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam5</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">boolean</span> isPrime = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i++)&#123;</span><br><span class="line">    </span><br><span class="line">               <span class="keyword">double</span> temp = Math.sqrt(i);</span><br><span class="line">    </span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; temp; j++)&#123;</span><br><span class="line">    </span><br><span class="line">                   <span class="keyword">if</span> (i % j == <span class="number">0</span>)&#123;</span><br><span class="line">    </span><br><span class="line">                       isPrime = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">                   &#125;</span><br><span class="line">    </span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">               <span class="keyword">if</span> (isPrime)&#123;</span><br><span class="line">    </span><br><span class="line">                   System.out.println(i);</span><br><span class="line">    </span><br><span class="line">                   total++;</span><br><span class="line">    </span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">               isPrime = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">    </span><br><span class="line">           System.out.println(<span class="string">&quot;共有素数&quot;</span> + total + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@ClassName</span> Exam6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2020/6/3 下午 3:10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &lt; max; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ge = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> shi = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> bai = i / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Math.pow(ge,<span class="number">3</span>) + Math.pow(shi,<span class="number">3</span>) + Math.pow(bai,<span class="number">3</span>) == i)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><blockquote><p>在循环中，只要除数不等于0，用较大数除以较小的数，将小的一个数作为下一轮循环的大数，取得的余数作为下一轮循环的较小的数，如此循环直到较小的数的值为0，返回较大的数，此数即为最大公约数，最小公倍数为两数之积除以最大公约数。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Exam7</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/6/3 下午 3:22</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> (a &gt; b)?a:b;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> (a &lt; b)?a:b;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个正整数：&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> n1 = in.nextInt();</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个正整数：&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> n2 = in.nextInt();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> Multiply = n1 * n2;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> min = min(n1,n2);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> max = max(n1,n2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> greatestCommonDivisor;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> leastCommonMultiple;</span><br><span class="line">        <span class="keyword">while</span> (min != <span class="number">0</span>)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">int</span> temp = max % min;</span><br><span class="line"> </span><br><span class="line">            max = min;</span><br><span class="line"> </span><br><span class="line">            min = temp;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        greatestCommonDivisor = max;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;最大公约数：&quot;</span> + greatestCommonDivisor);</span><br><span class="line"> </span><br><span class="line">        leastCommonMultiple = Multiply / greatestCommonDivisor;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;最小公倍数：&quot;</span> + leastCommonMultiple);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。 </p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">package</span> exam;</span><br><span class="line">   <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Exam8</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> 17235</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2020/6/3 下午 4:59</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam8</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanStatistics</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">char</span>[] array = a.toCharArray();</span><br><span class="line">    </span><br><span class="line">           <span class="comment">//字母个数</span></span><br><span class="line">    </span><br><span class="line">           <span class="keyword">int</span> letter = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">           <span class="comment">//空格个数</span></span><br><span class="line">    </span><br><span class="line">           <span class="keyword">int</span> space = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">           <span class="comment">//数字个数</span></span><br><span class="line">    </span><br><span class="line">           <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">           <span class="comment">//其他字符</span></span><br><span class="line">    </span><br><span class="line">           <span class="keyword">int</span> character = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">               array[i] = a.charAt(i);</span><br><span class="line">    </span><br><span class="line">               <span class="keyword">if</span> (<span class="number">63</span> &lt;= array[i] &amp;&amp; array[i] &lt;= <span class="number">90</span> || <span class="number">97</span> &lt;= array[i] &amp;&amp; array[i] &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                   letter++;</span><br><span class="line">    </span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">48</span> &lt;= array[i] &amp;&amp; array[i] &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                   num++;</span><br><span class="line">    </span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] == <span class="number">32</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                   space++;</span><br><span class="line">    </span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">                   character++;</span><br><span class="line">    </span><br><span class="line">               &#125;</span><br><span class="line">    </span><br><span class="line">           &#125;</span><br><span class="line">    </span><br><span class="line">           System.out.print(<span class="string">&quot;英文字母个数:&quot;</span> + letter  + <span class="string">&quot; 空格个数:&quot;</span> + space + <span class="string">&quot; 数字个数:&quot;</span> + num + <span class="string">&quot; 其他字符个数:&quot;</span> + character);</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">           Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    </span><br><span class="line">           System.out.println(<span class="string">&quot;请输入一串字符：&quot;</span>);</span><br><span class="line">    </span><br><span class="line">           String a = in.nextLine();</span><br><span class="line">    </span><br><span class="line">           scanStatistics(a);</span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java期末考&quot;&gt;&lt;a href=&quot;#Java期末考&quot; class=&quot;headerlink&quot; title=&quot;Java期末考&quot;&gt;&lt;/a&gt;&lt;code&gt;Java期末考&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;复习脑图&quot;&gt;&lt;a href=&quot;#复习脑图&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="面向对象程序设计" scheme="https://blog.dhbxs.top/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://blog.dhbxs.top/tags/JAVA/"/>
    
    <category term="Eclipse" scheme="https://blog.dhbxs.top/tags/Eclipse/"/>
    
    <category term="IDEA" scheme="https://blog.dhbxs.top/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>实验7——查找算法</title>
    <link href="https://blog.dhbxs.top/posts/9db3afbc.html"/>
    <id>https://blog.dhbxs.top/posts/9db3afbc.html</id>
    <published>2020-05-15T02:34:34.000Z</published>
    <updated>2020-12-24T15:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h2><ul><li>熟悉常用查找算法；</li><li>熟悉二叉排序树的定义和有关操作。</li></ul><hr><h2 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h2><p>查找表结构定义如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"> <span class="keyword">int</span> key;  <span class="comment">//主关键字</span></span><br><span class="line">  ...      <span class="comment">//数据元素其他项的信息，可不定义；</span></span><br><span class="line"> &#125;ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  ElemType *R; <span class="comment">//表基址</span></span><br><span class="line">  <span class="keyword">int</span> length;  <span class="comment">//表长</span></span><br><span class="line">&#125;SSTable;</span><br></pre></td></tr></table></figure><ul><li>1.编写静态查找的三种算法：顺序查找、折半查找和分块查找</li><li>2.编写二叉排序的建立、显示、插入、删除、查找元素</li></ul><hr><h2 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h2><ul><li>程序要添加适当的注释，程序的书写要采用缩进格式。</li><li>程序要具在一定的健壮性，即当输入数据非法时，程序也能适当地做出反应，如插入删除时指定的位置不对等等。</li><li>程序要做到界面友好，在程序运行时用户可以根据相应的提示信息进行操作。</li><li>在体会中描述如下内容：<br>按照你的测试数据建立的二叉排序树示意图:<br>开始录入数据示意图  <img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200515114244.png" alt="开始录入数据示意图"><br>插入数据4示意图 <img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200515114251.png" alt="插入数据4示意图"><br>删除数据8示意图  <img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200515114255.png" alt="删除数据8示意图"></li></ul><hr><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><hr><h3 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h3><h4 id="SSTable-h"><a href="#SSTable-h" class="headerlink" title="SSTable.h:"></a>SSTable.h:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线性表的查找的定义</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/5/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHIYAN7_SSTABLE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIYAN7_SSTABLE_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxLength 5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;   <span class="comment">//主关键字</span></span><br><span class="line">    <span class="comment">//InfoType otherinfo;    //数据元素其他项的信息，可不定义；</span></span><br><span class="line">&#125; ElemType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType *R; <span class="comment">//表基址</span></span><br><span class="line">    <span class="keyword">int</span> length;  <span class="comment">//表长</span></span><br><span class="line">&#125;SSTable;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//索引表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">directionChart</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">&#125;DirectionChart[MaxLength];</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> SSTable <span class="title">initTable</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 顺序查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST,<span class="keyword">int</span> key)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 折半查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,<span class="keyword">int</span> key)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建索引块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">createIndex</span><span class="params">(SSTable ST,DirectionChart &amp;Index)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 分块查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">blockIndex</span><span class="params">(SSTable ST,ElemType e)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//SHIYAN7_SSTABLE_H</span></span></span><br></pre></td></tr></table></figure><h4 id="SSTable-cpp"><a href="#SSTable-cpp" class="headerlink" title="SSTable.cpp:"></a>SSTable.cpp:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/5/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SSTable.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SSTable <span class="title">initTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SSTable t;</span><br><span class="line">    t.R = (ElemType *)<span class="built_in">malloc</span>(MaxLength*<span class="built_in"><span class="keyword">sizeof</span></span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!t.R)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 顺序查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ST.length; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ST.R[i].key == key)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 折半查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> high = ST.length;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (key == ST.R[mid].key)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key &lt;ST.R[mid].key)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *创建块用于分块查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createIndex</span><span class="params">(SSTable ST,DirectionChart &amp;Index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MaxLength;i++)&#123;</span><br><span class="line">        Index[i].start=j;</span><br><span class="line">        Index[i].key=ST.R[j].key;</span><br><span class="line">        j+=<span class="number">6</span>;</span><br><span class="line">        Index[i].end=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=Index[i].start+<span class="number">1</span>;k&lt;=Index[i].end;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Index[i].key&lt;ST.R[k].key)&#123;</span><br><span class="line">                Index[i].key=ST.R[k].key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 分块查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">blockIndex</span><span class="params">(SSTable ST,ElemType e)</span></span>&#123;</span><br><span class="line">    DirectionChart Index;</span><br><span class="line">    <span class="built_in">createIndex</span>(ST,Index);</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;MaxLength &amp;&amp; e.key&gt;Index[i].key)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;MaxLength)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    j=Index[i].start;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=Index[i].end &amp;&amp; ST.R[j].key!=e.key)&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;Index[i].end) &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp:"></a>main.cpp:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SSTable.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tempKey,result;</span><br><span class="line">    SSTable S;</span><br><span class="line">    S = <span class="built_in">initTable</span>();</span><br><span class="line">    S.R[<span class="number">0</span>].key = <span class="number">5</span>;</span><br><span class="line">    S.R[<span class="number">1</span>].key = <span class="number">3</span>;</span><br><span class="line">    S.R[<span class="number">2</span>].key = <span class="number">8</span>;</span><br><span class="line">    S.R[<span class="number">3</span>].key = <span class="number">6</span>;</span><br><span class="line">    S.R[<span class="number">4</span>].key = <span class="number">9</span>;</span><br><span class="line">    S.length = MaxLength;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的数据值:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tempKey);</span><br><span class="line">    result = <span class="built_in">Search_Seq</span>(S,tempKey);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序查找结果:没找到\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序查找结果:元素所在位置:%d\n&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">    result = <span class="built_in">Search_Bin</span>(S,tempKey);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序查找结果:没找到\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;折半查找结果:元素所在位置:%d\n&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">    ElemType e;</span><br><span class="line">    e.key = tempKey;</span><br><span class="line">    result = <span class="built_in">blockIndex</span>(S,e);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分块查找结果:没找到\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分块查找结果:元素所在位置:%d\n&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验截图："><a href="#实验截图：" class="headerlink" title="实验截图："></a>实验截图：</h4><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200515120449.png" alt="image-20200515120429930"></p><hr><h3 id="第二题："><a href="#第二题：" class="headerlink" title="第二题："></a>第二题：</h3><h4 id="BST-h"><a href="#BST-h" class="headerlink" title="BST.h:"></a>BST.h:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉排序树</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/5/14.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHIYAN7_2_BST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIYAN7_2_BST_H</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    KeyType key;<span class="comment">//关键字项</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//每个结点的数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>;</span><span class="comment">//左结点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">rchild</span>;</span><span class="comment">//右结点</span></span><br><span class="line">&#125;BSTNode,*BSTree;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的插入</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">insertBST</span><span class="params">(BSTree &amp;T, ElemType e)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的建立</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">CreateBST</span><span class="params">(BSTree &amp;T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以中序遍历的方式显示二叉树</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BSTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在二叉排序树里查找元素</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> * @return 当前二叉排序树的指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> BSTree <span class="title">searchBST</span><span class="params">(BSTree T,KeyType key)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的元素的删除</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">DeleteBST</span><span class="params">(BSTree &amp;T,KeyType key)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//SHIYAN7_2_BST_H</span></span></span><br></pre></td></tr></table></figure><h4 id="BST-cpp"><a href="#BST-cpp" class="headerlink" title="BST.cpp:"></a>BST.cpp:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/5/14.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BST.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENDFLAG  -1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的插入</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertBST</span><span class="params">(BSTree &amp;T, ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">        BSTree S = <span class="keyword">new</span> BSTNode;</span><br><span class="line">        S-&gt;data = e;</span><br><span class="line">        S-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">        S-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        T = S;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.key&lt;T-&gt;data.key)</span><br><span class="line">        <span class="built_in">insertBST</span>(T-&gt;lchild,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.key&gt;T-&gt;data.key)</span><br><span class="line">        <span class="built_in">insertBST</span>(T-&gt;rchild,e);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的建立</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBST</span><span class="params">(BSTree &amp;T)</span></span>&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>;</span><br><span class="line">    ElemType *e = <span class="keyword">new</span> ElemType;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    e-&gt;key = a;</span><br><span class="line">    <span class="keyword">while</span>(e-&gt;key != ENDFLAG)&#123;</span><br><span class="line">        <span class="built_in">insertBST</span>(T,*e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        e-&gt;key = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以中序遍历的方式显示二叉树</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BSTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历左子树</span></span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    <span class="comment">//输出结点数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data.key);</span><br><span class="line">    <span class="comment">//遍历右子树</span></span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在二叉排序树里查找元素</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> * @return 当前二叉排序树的指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BSTree <span class="title">searchBST</span><span class="params">(BSTree T,KeyType key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T || key == T-&gt;data.key)&#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;T-&gt;data.key)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">searchBST</span>(T-&gt;lchild,key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">searchBST</span>(T-&gt;rchild,key);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的元素的删除</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteBST</span><span class="params">(BSTree &amp;T,KeyType key)</span></span>&#123;</span><br><span class="line">    BSTree p = <span class="keyword">new</span> BSTNode;</span><br><span class="line">    p=T;</span><br><span class="line">    BSTree f = <span class="keyword">new</span> BSTNode;</span><br><span class="line">    f=<span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data.key==key)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        f=p;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data.key&gt;key) &#123;</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p=p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span>;</span><br><span class="line">    BSTree q = <span class="keyword">new</span> BSTNode;</span><br><span class="line">    q = p;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((p-&gt;lchild) &amp;&amp; (p-&gt;rchild))&#123;</span><br><span class="line">        BSTree s = <span class="keyword">new</span> BSTNode;</span><br><span class="line">        s = p-&gt;lchild;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rchild)&#123;</span><br><span class="line">            q = s;</span><br><span class="line">            s = s-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data.key = s-&gt;data.key;</span><br><span class="line">        <span class="keyword">if</span>(q != p)&#123;</span><br><span class="line">            q-&gt;rchild = s-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            q-&gt;lchild = s-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> s;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;rchild)&#123;</span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;lchild)&#123;</span><br><span class="line">        p = p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!f)&#123;</span><br><span class="line">        T=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(q==f-&gt;lchild)</span><br><span class="line">        f-&gt;lchild=p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f-&gt;rchild=p;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp:"></a>main.cpp:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BST.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BSTree bsTree;</span><br><span class="line">    <span class="keyword">int</span> findNumber;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;开始建立二叉排序树，以-1结束\n&quot;</span>);</span><br><span class="line">    <span class="built_in">CreateBST</span>(bsTree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉排序树的显示，以中序遍历来显示\n&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(bsTree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉排序树的查找，请输入关键值key\n&quot;</span>);</span><br><span class="line">    cin&gt;&gt;findNumber;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">searchBST</span>(bsTree,findNumber)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d在二叉排序树中\n&quot;</span>,findNumber);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不在二叉排序树中\n&quot;</span>,findNumber);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉排序树的插入,请输入关键值key\n&quot;</span>);</span><br><span class="line">    ElemType elemType;</span><br><span class="line">    cin&gt;&gt;findNumber;</span><br><span class="line">    elemType.key=findNumber;</span><br><span class="line">    <span class="built_in">insertBST</span>(bsTree,elemType);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入后的二叉排序树的显示，以中序遍历来显示\n&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(bsTree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉排序树的删除,请输入关键值key\n&quot;</span>);</span><br><span class="line">    cin&gt;&gt;findNumber;</span><br><span class="line">    <span class="built_in">DeleteBST</span>(bsTree,findNumber);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除后的二叉排序树的显示，以中序遍历来显示\n&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(bsTree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验截图：-1"><a href="#实验截图：-1" class="headerlink" title="实验截图："></a>实验截图：</h4><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200515120544.png" alt="image-20200515120542928"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200515120603.png" alt="image-20200515120602596"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验目的：&quot;&gt;&lt;a href=&quot;#实验目的：&quot; class=&quot;headerlink&quot; title=&quot;实验目的：&quot;&gt;&lt;/a&gt;实验目的：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;熟悉常用查找算法；&lt;/li&gt;
&lt;li&gt;熟悉二叉排序树的定义和有关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JSP中的请求转发与重定向</title>
    <link href="https://blog.dhbxs.top/posts/664e8cf4.html"/>
    <id>https://blog.dhbxs.top/posts/664e8cf4.html</id>
    <published>2020-05-11T06:48:04.000Z</published>
    <updated>2020-12-23T14:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求转发与重定向小练"><a href="#请求转发与重定向小练" class="headerlink" title="请求转发与重定向小练"></a>请求转发与重定向小练</h2><p>1已知文件夹结构如上图，请分别采用转发（相对路径和绝对路径）和重定向（相对路径和绝对路径）的方式，给出从1.jsp 跳转到2.jsp的四条语句：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200511145520.png" alt="img"></p><p>转发：</p><p>绝对路径：&lt;%request.getRequestDispatcher(“/front/2.jsp”).forward(request,response);%&gt;</p><p>相对路径：</p><p>&lt;%request.getRequestDispatcher(“../front/2.jsp”).forward(request,response);%&gt;</p><p>重定向：</p><p>绝对路径：</p><p>&lt;%response.sendRedirect(request.getContextPath()+”/front/2.jsp”);%&gt;</p><p>相对路径：</p><p>&lt;%response.sendRedirect(“../front/2.jsp”);  %&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;请求转发与重定向小练&quot;&gt;&lt;a href=&quot;#请求转发与重定向小练&quot; class=&quot;headerlink&quot; title=&quot;请求转发与重定向小练&quot;&gt;&lt;/a&gt;请求转发与重定向小练&lt;/h2&gt;&lt;p&gt;1已知文件夹结构如上图，请分别采用转发（相对路径和绝对路径）和重定向（相对路</summary>
      
    
    
    
    <category term="Web应用程序设计" scheme="https://blog.dhbxs.top/categories/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JSP" scheme="https://blog.dhbxs.top/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习路线</title>
    <link href="https://blog.dhbxs.top/posts/8661c25b.html"/>
    <id>https://blog.dhbxs.top/posts/8661c25b.html</id>
    <published>2020-05-09T14:35:37.000Z</published>
    <updated>2020-05-09T14:35:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总框架图"><a href="#总框架图" class="headerlink" title="总框架图"></a>总框架图</h1><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/05/09/Y1VUYQ.png" alt="Y1VUYQ.png"></p><h1 id="文字版"><a href="#文字版" class="headerlink" title="文字版"></a>文字版</h1><h3 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h3><h3 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h3><ul><li><p>基础语法</p><ul><li><p>JDK安装配置</p></li><li><p>IDE选择</p><ul><li>IDEA</li><li>Eclipse</li></ul></li><li><p>数据类型</p><ul><li>整型</li><li>浮点型</li><li>char类型</li><li>Unicode类型</li><li>Boolean</li></ul></li><li><p>变量</p></li><li><p>运算符</p></li><li><p>字符串</p></li><li><p>输入输出</p></li><li><p>流程控制</p><ul><li><p>条件语句 if</p></li><li><p>循环</p><ul><li>for</li><li>while</li><li>do-while</li></ul></li><li><p>多重选择（Swith）</p></li><li><p>中断控制</p><ul><li>break</li><li>continue</li></ul></li></ul></li><li><p>方法的声明与使用</p></li><li><p>方法的重载</p></li><li><p>数组</p><ul><li>数组的创建与使用</li><li>一维数组</li><li>多维数组</li></ul></li></ul></li><li><p>面向对象OOP</p><ul><li><p>类</p><ul><li>预定义类</li><li>自定义类</li></ul></li><li><p>对象</p><ul><li>用类制造对象</li></ul></li><li><p>属性</p></li><li><p>方法</p></li><li><p>包</p></li><li><p>this</p></li><li><p>构造器</p></li><li><p>封装</p></li><li><p>继承</p></li><li><p>多态</p></li><li><p>重写</p></li><li><p>Super</p></li><li><p>Object</p></li></ul></li><li><p>接口Interface</p><ul><li>接口与抽象类</li></ul></li><li><p>容器</p></li><li><p>异常</p><ul><li>异常的原理</li><li>异常的堆栈抛出机制</li><li>异常的结构体系</li><li>受检与非受检异常</li><li>异常的处理</li><li>用finally回收资源</li><li>throw制造异常</li><li>自定义异常</li></ul></li><li><p>泛型</p></li><li><p>反射</p><ul><li>反射的原理分析</li><li>JVM与类</li><li>类的加载，连接，初始化</li><li>类加载机制</li></ul></li><li><p>注解</p></li><li><p>I/O</p><ul><li>I/O流结构体系</li><li>I/O流原理分析</li><li>I/O流 的分类</li><li>I/O流与文件操作</li><li>I/O流的包装与链接</li><li>缓冲流</li><li>文件的复制与性能对比</li><li>对象流</li><li>控制台I/O</li><li>标准输入输出流</li><li>打印流</li><li>转换流</li></ul></li><li><p>图形化（Swing）</p></li></ul><h3 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a>JVM虚拟机</h3><ul><li>字节码执行机制</li><li>JVM内存模型</li><li>GC垃圾回收</li><li>JVM性能监控与故障定位</li><li>JVM调优</li></ul><h3 id="并发-多线程"><a href="#并发-多线程" class="headerlink" title="并发/多线程"></a>并发/多线程</h3><ul><li>线程的原理</li><li>线程的创建与启动</li><li>线程的控制</li><li>线程的调度</li><li>线程的优先级</li><li>线程的生命周期</li><li>多线程的安全问题</li><li>线程的同步</li><li>互斥锁</li><li>线程死锁问题</li><li>线程通信</li></ul><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li><p>线性表</p><ul><li>线性表顺序存储</li><li>线性表链式存储</li><li>单链表</li><li>循环链表</li></ul></li><li><p>栈与队列</p><ul><li><p>栈</p><ul><li>栈的顺序存储结构</li><li>栈的链式存储结构</li></ul></li><li><p>队列</p><ul><li>队列的顺序存储</li><li>循环队列</li><li>队列的链式存储</li></ul></li></ul></li><li><p>串</p><ul><li><p>串的顺序存储结构</p></li><li><p>串的链式存储结构</p></li><li><p>模式匹配算法</p><ul><li>朴素模式匹配算法</li><li>KMP模式匹配算法</li></ul></li></ul></li><li><p>树</p><ul><li><p>树的定义</p></li><li><p>二叉树</p><ul><li>二叉树的定义</li><li>二叉树的性质</li><li>二叉树的顺序存储结构</li><li>二叉链表</li></ul></li><li><p>树和森林</p></li><li><p>哈夫曼树</p></li></ul></li><li><p>图</p><ul><li><p>图的存储结构</p><ul><li>邻接矩阵</li><li>邻接表</li><li>十字链表</li><li>邻接多重表</li></ul></li><li><p>图的遍历</p><ul><li>DFS深度优先搜索</li><li>BFS广度优先搜索</li></ul></li></ul></li><li><p>哈希</p></li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><p>查找</p><ul><li><p>线性表的查找</p><ul><li>顺序查找</li><li>折半查找</li><li>分块查找</li></ul></li><li><p>树表的查找</p><ul><li>二排序树</li><li>平衡二叉树</li><li>B-/B+树</li></ul></li><li><p>散列表的查找</p></li></ul></li><li><p>排序</p><ul><li>插入排序</li><li>交换排序</li><li>选择排序</li><li>归并排序</li><li>基数排序</li><li>外部排序</li></ul></li><li><p>贪心</p></li><li><p>分治</p></li><li><p>动态规划</p></li><li><p>回溯</p></li></ul><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="IP-ICMP协议"><a href="#IP-ICMP协议" class="headerlink" title="IP/ICMP协议"></a>IP/ICMP协议</h3><h3 id="TCP-UDP协议"><a href="#TCP-UDP协议" class="headerlink" title="TCP/UDP协议"></a>TCP/UDP协议</h3><h3 id="DNS-HTTP-HTTPS协议"><a href="#DNS-HTTP-HTTPS协议" class="headerlink" title="DNS/HTTP/HTTPS协议"></a>DNS/HTTP/HTTPS协议</h3><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><h3 id="Session-Cookies"><a href="#Session-Cookies" class="headerlink" title="Session/Cookies"></a>Session/Cookies</h3><h2 id="数据库-SQL"><a href="#数据库-SQL" class="headerlink" title="数据库/SQL"></a>数据库/SQL</h2><h3 id="SQL基本语句"><a href="#SQL基本语句" class="headerlink" title="SQL基本语句"></a>SQL基本语句</h3><h3 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h3><h3 id="事务及隔离级别"><a href="#事务及隔离级别" class="headerlink" title="事务及隔离级别"></a>事务及隔离级别</h3><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h3 id="并发-锁"><a href="#并发-锁" class="headerlink" title="并发/锁"></a>并发/锁</h3><h3 id="内存管理和调度"><a href="#内存管理和调度" class="headerlink" title="内存管理和调度"></a>内存管理和调度</h3><h3 id="I-O原理"><a href="#I-O原理" class="headerlink" title="I/O原理"></a>I/O原理</h3><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><h3 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h3><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><h3 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h3><h3 id="建造者"><a href="#建造者" class="headerlink" title="建造者"></a>建造者</h3><p>框架图下载链接：<a href="https://pan.baidu.com/s/1D-8Drm-AQ47IOo13sjiWog">https://pan.baidu.com/s/1D-8Drm-AQ47IOo13sjiWog</a><br>提取码：clgu</p><p><em>未完待续</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总框架图&quot;&gt;&lt;a href=&quot;#总框架图&quot; class=&quot;headerlink&quot; title=&quot;总框架图&quot;&gt;&lt;/a&gt;总框架图&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/202</summary>
      
    
    
    
    <category term="面向对象程序设计" scheme="https://blog.dhbxs.top/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Java" scheme="https://blog.dhbxs.top/tags/Java/"/>
    
    <category term="计算机网络" scheme="https://blog.dhbxs.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="数据库" scheme="https://blog.dhbxs.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="操作系统" scheme="https://blog.dhbxs.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="设计模式" scheme="https://blog.dhbxs.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>实验五-树的应用</title>
    <link href="https://blog.dhbxs.top/posts/1c3b0915.html"/>
    <id>https://blog.dhbxs.top/posts/1c3b0915.html</id>
    <published>2020-04-24T14:29:26.000Z</published>
    <updated>2020-12-23T14:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验题目：树的应用"><a href="#实验题目：树的应用" class="headerlink" title="实验题目：树的应用"></a>实验题目：树的应用</h2><h2 id="实验环境：-CLion"><a href="#实验环境：-CLion" class="headerlink" title="实验环境： CLion"></a>实验环境： CLion</h2><h2 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h2><h3 id="1．熟悉树的存储结构；"><a href="#1．熟悉树的存储结构；" class="headerlink" title="1．熟悉树的存储结构；"></a>1．熟悉树的存储结构；</h3><h3 id="2．熟悉二叉链表的创建；"><a href="#2．熟悉二叉链表的创建；" class="headerlink" title="2．熟悉二叉链表的创建；"></a>2．熟悉二叉链表的创建；</h3><h3 id="3．熟悉二叉树的遍历操作。"><a href="#3．熟悉二叉树的遍历操作。" class="headerlink" title="3．熟悉二叉树的遍历操作。"></a>3．熟悉二叉树的遍历操作。</h3><h2 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h2><ol><li>依据顺序二叉树的存储结构：实现基于先序遍历思想实现二叉链表的创建，并输出其先序、中序和后序遍历的结果<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>&#123;</span></span><br><span class="line">  TElemType  data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>  *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span> <span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiNode,*BiTree;</span><br></pre></td></tr></table></figure></li><li>统计上题创建的二叉树的叶结点个数 </li><li>实现二叉树的层次遍历，转换成程序并上机实现（可以借用队列实现）；</li><li>（选做）实现二叉树遍历的非递归算法，转换成程序并上机实现（可以借助栈实现）</li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="BiTree-h"><a href="#BiTree-h" class="headerlink" title="BiTree.h"></a><code>BiTree.h</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉树结点定义</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/4/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLION_WORKSPACE_BITREE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLION_WORKSPACE_BITREE_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiNode, *BiTree;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 按前序输入二叉树中结点的值（一次一个字符）</span></span><br><span class="line"><span class="comment"> * # 表示空树，构造二叉链表表示二叉树T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> BiTree <span class="title">CreatBiTree</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历递归算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PerOrderTraverse</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树中序遍历递归算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树后序遍历递归算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 统计二叉树中叶子结点的个数统计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">BiTreeLeavesCount</span><span class="params">(BiTree T,<span class="keyword">int</span> *count)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 调用计数函数，初始化count计数器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Count</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CLION_WORKSPACE_BITREE_H</span></span></span><br></pre></td></tr></table></figure><h3 id="BiTree-cpp"><a href="#BiTree-cpp" class="headerlink" title="BiTree.cpp"></a><code>BiTree.cpp</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉树基本操作函数</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/4/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BiTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 按前序输入二叉树中结点的值（一次一个字符）</span></span><br><span class="line"><span class="comment"> * # 表示空树，构造二叉链表表示二叉树T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BiTree <span class="title">CreatBiTree</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    TElemType ch;</span><br><span class="line">    ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">    T = (BiTree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BiNode));</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成根结点</span></span><br><span class="line">    T-&gt;data = ch;</span><br><span class="line">    <span class="comment">//构造左子树</span></span><br><span class="line">    T-&gt;lchild = <span class="built_in">CreatBiTree</span>(T-&gt;lchild);</span><br><span class="line">    <span class="comment">//构造右子树</span></span><br><span class="line">    T-&gt;rchild = <span class="built_in">CreatBiTree</span>(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历递归算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PerOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里输出结点数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);</span><br><span class="line">    <span class="comment">//然后遍历左子树</span></span><br><span class="line">    <span class="built_in">PerOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    <span class="comment">//最后遍历右子树</span></span><br><span class="line">    <span class="built_in">PerOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树中序遍历递归算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后遍历左子树</span></span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    <span class="comment">//这里输出结点数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);</span><br><span class="line">    <span class="comment">//最后遍历右子树</span></span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树后序遍历递归算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后遍历左子树</span></span><br><span class="line">    <span class="built_in">PostOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">    <span class="comment">//最后遍历右子树</span></span><br><span class="line">    <span class="built_in">PostOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">    <span class="comment">//这里输出结点数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 统计二叉树中叶子结点的个数统计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BiTreeLeavesCount</span><span class="params">(BiTree T,<span class="keyword">int</span> *count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span> &amp;&amp; T-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; T-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        *count = *count + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        <span class="built_in">BiTreeLeavesCount</span> (T-&gt;lchild,count);<span class="comment">/*先序遍历T的左子树*/</span></span><br><span class="line">        <span class="built_in">BiTreeLeavesCount</span> (T-&gt;rchild,count);<span class="comment">/*先序遍历T的右子数*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 调用计数函数，初始化count计数器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">BiTreeLeavesCount</span>(T,&amp;count);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Queue-h"><a href="#Queue-h" class="headerlink" title="Queue.h"></a><code>Queue.h</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 队列定义</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/4/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLION_WORKSPACE_QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLION_WORKSPACE_QUEUE_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BiTree.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status ;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">    BiTree data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkQ</span>&#123;</span></span><br><span class="line">    QueuePtr front,rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 队列初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue *Q)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 队列入队操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> Status <span class="title">EnQueue</span><span class="params">(LinkQueue *Q,BiTree e)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 队列出队操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> Status <span class="title">DeQueue</span><span class="params">(LinkQueue *Q,BiTree *e)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CLION_WORKSPACE_QUEUE_H</span></span></span><br></pre></td></tr></table></figure><h3 id="Queue-cpp"><a href="#Queue-cpp" class="headerlink" title="Queue.cpp"></a><code>Queue.cpp</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列基本操作函数</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/4/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BiTree.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status ;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 队列初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue *Q)</span></span>&#123;</span><br><span class="line">    Q-&gt;front=Q-&gt;rear=<span class="keyword">new</span> QNode;</span><br><span class="line">    Q-&gt;front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//    QueuePtr s = (QueuePtr)malloc(sizeof(QNode));</span></span><br><span class="line"><span class="comment">//    //存储分配失败</span></span><br><span class="line"><span class="comment">//    if (!s)&#123;</span></span><br><span class="line"><span class="comment">//        exit(OVERFLOW);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    Q-&gt;front=Q-&gt;rear=s;</span></span><br><span class="line"><span class="comment">//    Q-&gt;front-&gt;next=NULL;</span></span><br><span class="line"><span class="comment">//    return;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 队列入队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue *Q,BiTree e)</span></span>&#123;</span><br><span class="line">    QueuePtr s = (QueuePtr)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(QNode));</span><br><span class="line">    <span class="comment">//存储分配失败</span></span><br><span class="line">    <span class="keyword">if</span> (!s)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//把刚放进去e的结点s放到原来队尾，使之成为原队尾的后继</span></span><br><span class="line">    Q-&gt;rear-&gt;next = s;</span><br><span class="line">    <span class="comment">//将队尾指针指rear向s</span></span><br><span class="line">    Q-&gt;rear = s;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"><span class="comment">//    delete s;</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 队列出队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue *Q,BiTree *e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//若队列不为空，则删除队列的对头元素，并将其返回给e</span></span><br><span class="line">    QueuePtr p;</span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;front == Q-&gt;rear))&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    p = Q-&gt;front-&gt;next;</span><br><span class="line">    Q-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="comment">//如果队头是队尾，则删除后将rear指向头结点</span></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear == p)&#123;</span><br><span class="line">        Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    &#125;</span><br><span class="line">    *e = p-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"><span class="comment">//    delete p;</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stack-h"><a href="#Stack-h" class="headerlink" title="Stack.h"></a><code>Stack.h</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈的定义</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/4/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLION_WORKSPACE_STACK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLION_WORKSPACE_STACK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BiTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAXSIZE  100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 栈的结构体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BiNode  *base;</span><br><span class="line">    BiNode   *top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">extern</span> Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> Status <span class="title">Push</span><span class="params">(SqStack &amp;S,BiNode e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> Status <span class="title">Pop</span><span class="params">(SqStack &amp;S,BiNode &amp;e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> BiNode <span class="title">GetTop</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CLION_WORKSPACE_STACK_H</span></span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Stack-cpp"><a href="#Stack-cpp" class="headerlink" title="Stack.cpp"></a><code>Stack.cpp</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 17235 on 2020/4/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.base = <span class="keyword">new</span> BiNode [MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span> (!S.base)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    S.top = S.base;</span><br><span class="line">    S.stacksize = MAXSIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断栈满栈空</span></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//求栈长</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S.top - S.base);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//入栈函数</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S,BiNode e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top - S.base == S.stacksize)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        *S.top++ = e;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//出栈函数</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S,BiNode &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = *--S.top;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取栈顶元素</span></span><br><span class="line"><span class="function">BiNode <span class="title">GetTop</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top != S.base)&#123;</span><br><span class="line">        <span class="keyword">return</span> *(S.top<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a><code>main.cpp</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BiTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Queue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">InOrderTraverseNo</span><span class="params">(BiTree T)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTree T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请以先序输入二叉树，以#结束：\n&quot;</span>);</span><br><span class="line">    T = <span class="built_in">CreatBiTree</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;前序遍历：&quot;</span>);</span><br><span class="line">    <span class="built_in">PerOrderTraverse</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序遍历：&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrderTraverse</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;后序遍历：&quot;</span>);</span><br><span class="line">    <span class="built_in">PostOrderTraverse</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;叶子结点个数：%d&quot;</span>,<span class="built_in">Count</span>(T));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;层序遍历：&quot;</span>);</span><br><span class="line">    <span class="built_in">LevelOrder</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（选做）二叉树中序遍历的非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrderTraverseNo</span>(T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉树借助队列进行层序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    LinkQueue *Q;</span><br><span class="line">    Q=(LinkQueue *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkQueue));</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="built_in">EnQueue</span>(Q,T);</span><br><span class="line">    <span class="keyword">while</span> ( Q-&gt;rear != Q-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q,&amp;T);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(Q,T-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( T-&gt;rchild != <span class="literal">NULL</span> )&#123;</span><br><span class="line">            <span class="built_in">EnQueue</span>(Q,T-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverseNo</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历二叉树T的非递归算法</span></span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    BiTree q = <span class="keyword">new</span> BiNode;</span><br><span class="line">    <span class="keyword">while</span> (p || !<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p) &#123;<span class="comment">//p非空</span></span><br><span class="line">            <span class="built_in">Push</span>(S,*p); <span class="comment">//根指针进栈</span></span><br><span class="line">            p=p-&gt;lchild; <span class="comment">//根指针进栈， 遍历左子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//p为空</span></span><br><span class="line">            <span class="built_in">Pop</span>(S,*q); <span class="comment">//退栈</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,q-&gt;data); <span class="comment">//访问根结点</span></span><br><span class="line">            p = q-&gt;rchild;  <span class="comment">//遍历右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>测试用二叉树示意图</code></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200424233834.png"></p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200424231908.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验题目：树的应用&quot;&gt;&lt;a href=&quot;#实验题目：树的应用&quot; class=&quot;headerlink&quot; title=&quot;实验题目：树的应用&quot;&gt;&lt;/a&gt;实验题目：树的应用&lt;/h2&gt;&lt;h2 id=&quot;实验环境：-CLion&quot;&gt;&lt;a href=&quot;#实验环境：-CLion&quot; c</summary>
      
    
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="C++" scheme="https://blog.dhbxs.top/tags/C/"/>
    
    <category term="C" scheme="https://blog.dhbxs.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>实验五-数据库安全性</title>
    <link href="https://blog.dhbxs.top/posts/42927077.html"/>
    <id>https://blog.dhbxs.top/posts/42927077.html</id>
    <published>2020-04-15T13:08:25.000Z</published>
    <updated>2020-12-23T14:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验基本要求"><a href="#实验基本要求" class="headerlink" title="实验基本要求"></a>实验基本要求</h2><p>1.知道数据库安全性采用的方法。</p><p>2.掌握数据库用户的创建。</p><p>3.掌握数据库的权限的分配。</p><p>4.掌握数据表角色的操作。</p><h2 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h2><p>1.创建不同的用户；</p><p>2.分配对象权限给不同的用户；</p><p>3.创建角色；</p><p>4.授予角色权限；</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>MySQL5.7；MySQL8.0；Navicat15；</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p><code>该实验全部基于</code><a href="https://dhbxs.club/2020/03/07/navicat-ji-ben-cao-zuo/">实验二-数据定义</a></p><h3 id="（1）创建用户U1，U2，U3，U4-U5，U6，U7，并设置密码；"><a href="#（1）创建用户U1，U2，U3，U4-U5，U6，U7，并设置密码；" class="headerlink" title="（1）创建用户U1，U2，U3，U4,U5，U6，U7，并设置密码；"></a>（1）创建用户U1，U2，U3，U4,U5，U6，U7，并设置密码；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">CREATE USER &#39;u1&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u1password&#39;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#39;u2&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u2password&#39;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#39;u3&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u3password&#39;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#39;u4&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u4password&#39;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#39;u5&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u5password&#39;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#39;u6&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u6password&#39;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#39;u7&#39;@&#39;localhost&#39; IDENTIFIED by &#39;u7password&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里统一设置密码格式为<code>用户</code> + <code>password</code>关键字，便于记忆，用户都为本地用户<code>localhost</code>。</p><h3 id="（2）把查询Student表权限授给用户U1；"><a href="#（2）把查询Student表权限授给用户U1；" class="headerlink" title="（2）把查询Student表权限授给用户U1；"></a>（2）把查询Student表权限授给用户U1；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT SELECT ON TABLE stu.student TO &#39;u1&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的数据库名叫做stu，所以指定stu数据库中的student表<code>stu.student</code>。</p><h3 id="（3）把对Student表和Course表的全部权限授予用户U2和U3；"><a href="#（3）把对Student表和Course表的全部权限授予用户U2和U3；" class="headerlink" title="（3）把对Student表和Course表的全部权限授予用户U2和U3；"></a>（3）把对Student表和Course表的全部权限授予用户U2和U3；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON stu.student TO &#39;u2&#39;@&#39;localhost&#39;,&#39;u3&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON stu.course TO &#39;u2&#39;@&#39;localhost&#39;,&#39;u3&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>student</code>，<code>course</code>是两个表，这里分开设置。</p><h3 id="（4）把查询Student表和修改学生学号的权限授给用户U4；"><a href="#（4）把查询Student表和修改学生学号的权限授给用户U4；" class="headerlink" title="（4）把查询Student表和修改学生学号的权限授给用户U4；"></a>（4）把查询Student表和修改学生学号的权限授给用户U4；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT SELECT ON stu.student TO &#39;u4&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br><span class="line">GRANT UPDATE(Sno) ON stu.student TO &#39;u4&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>学生学号列名为<code>Sno</code>。</p><h3 id="（5）把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户；"><a href="#（5）把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户；" class="headerlink" title="（5）把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户；"></a>（5）把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT INSERT ON stu.sc TO &#39;u5&#39;@&#39;localhost&#39; WITH GRANT OPTION;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>允许授权其他用户，只需在原来的基础上加上<code>WITH GRANT OPTION</code>关键字即可。</p><h3 id="（6）把对表SC的INSERT权限授予U6用户，并允许他再将此权限授予其他用户；"><a href="#（6）把对表SC的INSERT权限授予U6用户，并允许他再将此权限授予其他用户；" class="headerlink" title="（6）把对表SC的INSERT权限授予U6用户，并允许他再将此权限授予其他用户；"></a>（6）把对表SC的INSERT权限授予U6用户，并允许他再将此权限授予其他用户；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT INSERT ON stu.sc TO &#39;u6&#39;@&#39;localhost&#39; WITH GRANT OPTION;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="（7）把对表SC的INSERT权限授予U7用户，并不允许他再将此权限授予其他用户；"><a href="#（7）把对表SC的INSERT权限授予U7用户，并不允许他再将此权限授予其他用户；" class="headerlink" title="（7）把对表SC的INSERT权限授予U7用户，并不允许他再将此权限授予其他用户；"></a>（7）把对表SC的INSERT权限授予U7用户，并不允许他再将此权限授予其他用户；</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT INSERT ON stu.sc TO &#39;u7&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="（8）把用户U4修改学生学号的权限收回。"><a href="#（8）把用户U4修改学生学号的权限收回。" class="headerlink" title="（8）把用户U4修改学生学号的权限收回。"></a>（8）把用户U4修改学生学号的权限收回。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">REVOKE UPDATE(Sno) ON stu.student FROM &#39;u4&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="（9）把用户U5对SC表的INSERT权限收回。"><a href="#（9）把用户U5对SC表的INSERT权限收回。" class="headerlink" title="（9）把用户U5对SC表的INSERT权限收回。"></a>（9）把用户U5对SC表的INSERT权限收回。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">REVOKE INSERT ON stu.sc FROM &#39;u5&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="（10）通过角色来实现将一组权限授予一个用户。"><a href="#（10）通过角色来实现将一组权限授予一个用户。" class="headerlink" title="（10）通过角色来实现将一组权限授予一个用户。"></a>（10）通过角色来实现将一组权限授予一个用户。</h3><p>经查阅官方参考手册得知在<code>MySQL5.7</code>版本中，并没有角色功能，所以通过虚拟机重新安装了<code>MySQL8.0</code>的版本以及<code>Navicat15</code>。以下MySQL语句全部基于<code>MySQL8.0</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">CREATE ROLE &#39;R1&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br><span class="line">SET DEFAULT ROLE ALL TO &#39;root&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br><span class="line">GRANT SELECT, UPDATE, INSERT ON TABLE Student TO &#39;R1&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br><span class="line">GRANT &#39;R1&#39;@&#39;localhost&#39; TO &#39;u1&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一步是分4小步实现的：</p><p>1.首先创建一个角色 <code>R1</code>;</p><p>2.然后使用<code>GRANT</code>语句，使角色<code>R1</code>拥有<code>Student</code>表的<code>SELECT、UPDATE、INSERT</code>权限;</p><p>3.激活角色;</p><p>4.将这个角色授予用户<code>u1</code>，使他具有角色<code>R1</code>所包含的全部权限;</p><h3 id="（11）角色的权限修改。"><a href="#（11）角色的权限修改。" class="headerlink" title="（11）角色的权限修改。"></a>（11）角色的权限修改。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GRANT DELETE ON TABLE Student TO &#39;R1&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将<code>DELETE</code>权限授予<code>R1</code>角色。</p><h2 id="实验所用SQL语句汇总"><a href="#实验所用SQL语句汇总" class="headerlink" title="实验所用SQL语句汇总"></a>实验所用SQL语句汇总</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u1password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> stu.student <span class="keyword">TO</span> <span class="string">&#x27;u1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u2&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u2password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u3&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u3password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> stu.student <span class="keyword">TO</span> <span class="string">&#x27;u2&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;u3&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> stu.course <span class="keyword">TO</span> <span class="string">&#x27;u2&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;u3&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u4&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u4password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> stu.student <span class="keyword">TO</span> <span class="string">&#x27;u4&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> UPDATE(Sno) <span class="keyword">ON</span> stu.student <span class="keyword">TO</span> <span class="string">&#x27;u4&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u5&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u5password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> stu.sc <span class="keyword">TO</span> <span class="string">&#x27;u5&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u6&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u6password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> stu.sc <span class="keyword">TO</span> <span class="string">&#x27;u6&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;u7&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;u7password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> stu.sc <span class="keyword">TO</span> <span class="string">&#x27;u7&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> UPDATE(Sno) <span class="keyword">ON</span> stu.student <span class="keyword">FROM</span> <span class="string">&#x27;u4&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> stu.sc <span class="keyword">FROM</span> <span class="string">&#x27;u5&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> ROLE <span class="string">&#x27;R1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">DEFAULT</span> ROLE <span class="keyword">ALL</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, UPDATE, <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student <span class="keyword">TO</span> <span class="string">&#x27;R1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;R1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;u1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student <span class="keyword">TO</span> <span class="string">&#x27;R1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验基本要求&quot;&gt;&lt;a href=&quot;#实验基本要求&quot; class=&quot;headerlink&quot; title=&quot;实验基本要求&quot;&gt;&lt;/a&gt;实验基本要求&lt;/h2&gt;&lt;p&gt;1.知道数据库安全性采用的方法。&lt;/p&gt;
&lt;p&gt;2.掌握数据库用户的创建。&lt;/p&gt;
&lt;p&gt;3.掌握数据库的权</summary>
      
    
    
    
    <category term="数据库系统原理及应用" scheme="https://blog.dhbxs.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="MySQL" scheme="https://blog.dhbxs.top/tags/MySQL/"/>
    
    <category term="Navicat" scheme="https://blog.dhbxs.top/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>JSP实验二</title>
    <link href="https://blog.dhbxs.top/posts/71c4ad53.html"/>
    <id>https://blog.dhbxs.top/posts/71c4ad53.html</id>
    <published>2020-04-13T06:02:19.000Z</published>
    <updated>2020-12-23T14:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验二：jsp基本语法"><a href="#实验二：jsp基本语法" class="headerlink" title="实验二：jsp基本语法"></a>实验二：jsp基本语法</h2><h3 id="实验环境：Myeclipse-10"><a href="#实验环境：Myeclipse-10" class="headerlink" title="实验环境：Myeclipse 10"></a>实验环境：Myeclipse 10</h3><h3 id="实验题目："><a href="#实验题目：" class="headerlink" title="实验题目："></a>实验题目：</h3><p><code>熟悉jsp语法</code></p><p>1：在jsp文档内输入一个数字，如果小于60分，打印不及格，大于60分，打印及格。（分有out无out做法）</p><p>2：利用循环输出10行相同的文字（分有out无out做法）</p><p>3：看以下图片：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200413141536.png" alt="index.jsp"></p><p>试验分析查看效果。</p><p>4：应用java程序片段动态生成下拉列表,点击查询时，能弹出用户输入的内容：姓名，年龄，所在部门，如下图：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200413141728.png" alt="员工信息查询"></p><p>点击查询后，能在本网页的下方显示出刚输入的员工姓名，年龄，和所在部门。</p><h3 id="实验实现代码"><a href="#实验实现代码" class="headerlink" title="实验实现代码:"></a>实验实现代码:</h3><h4 id="第一题-2-1-jsp"><a href="#第一题-2-1-jsp" class="headerlink" title="第一题(2-1.jsp):"></a>第一题(2-1.jsp):</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">String path = request.getContextPath();</span><br><span class="line"></span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">  &lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &lt;title&gt;2-1&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">      &lt;%<span class="comment">//有out做法</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">int</span> number1 = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(number1&gt;<span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">              out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line"></span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">              out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       %&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">       &lt;%<span class="comment">//无out做法</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> number2 = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(number2&gt;<span class="number">60</span>)&#123;%&gt;</span><br><span class="line"></span><br><span class="line">              &lt;p&gt;及格&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">          &lt;% &#125;<span class="keyword">else</span>&#123;%&gt;</span><br><span class="line"></span><br><span class="line">              &lt;p&gt;不及格&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">          &lt;%&#125;</span><br><span class="line"></span><br><span class="line">        %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二题-2-2-jsp-："><a href="#第二题-2-2-jsp-：" class="headerlink" title="第二题(2-2.jsp)："></a>第二题(2-2.jsp)：</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">String path = request.getContextPath();</span><br><span class="line"></span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">  &lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &lt;title&gt;2-2&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%<span class="comment">//有out做法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            out.print(<span class="string">&quot;相同的文字&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     %&gt;</span><br><span class="line"></span><br><span class="line">     &lt;%<span class="comment">//无out做法</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;%&gt;</span><br><span class="line"></span><br><span class="line">             &lt;p&gt;相同的文字&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">         &lt;%&#125;</span><br><span class="line"></span><br><span class="line">      %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三题："><a href="#第三题：" class="headerlink" title="第三题："></a>第三题：</h4><p><code>实现动态输出效果，把书名按编号一行一行输出</code></p><h4 id="第四题-2-4-jsp-："><a href="#第四题-2-4-jsp-：" class="headerlink" title="第四题(2-4.jsp)："></a>第四题(2-4.jsp)：</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">String path = request.getContextPath();</span><br><span class="line"></span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">  &lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &lt;title&gt;2-2&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%String[] dept = &#123;<span class="string">&quot;策划部&quot;</span>,<span class="string">&quot;销售部&quot;</span>,<span class="string">&quot;研发部&quot;</span>,<span class="string">&quot;人事部&quot;</span>,<span class="string">&quot;测试部&quot;</span>&#125;; %&gt;</span><br><span class="line"></span><br><span class="line">      &lt;h1 align=&quot;center&quot;&gt;员工信息查询&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;form id=<span class="string">&quot;form&quot;</span> name=<span class="string">&quot;forme&quot;</span> method = <span class="string">&quot;post&quot;</span> action = <span class="string">&quot;2-4.jsp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            员工姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user_name&quot;</span> id=<span class="string">&quot;user_name&quot;</span> size=<span class="string">&quot;5&quot;</span>&gt;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">            年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user_age&quot;</span> id=<span class="string">&quot;user_age&quot;</span> size=<span class="string">&quot;3&quot;</span>&gt;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">            所在部门：&lt;select name=<span class="string">&quot;bumen&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">                     &lt;%<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dept.length;i++)&#123;%&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;option value=&quot;&lt;%=dept[i] %&gt;&quot;&gt;&lt;%=dept[i] %&gt;&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;/select&gt; </span><br><span class="line"></span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">        &lt;% request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;%</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;员工姓名:&quot;</span>+request.getParameter(<span class="string">&quot;user_name&quot;</span>)+<span class="string">&quot;&amp;nbsp;&amp;nbsp;年龄:&quot;</span>+request.getParameter(<span class="string">&quot;user_age&quot;</span>)+<span class="string">&quot;&amp;nbsp;&amp;nbsp;所在部门:&quot;</span>+request.getParameter(<span class="string">&quot;bumen&quot;</span>));</span><br><span class="line"></span><br><span class="line">            %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;    </span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>第四题在不输入任何信息的前提下点击查询会出现空指针异常</p><h3 id="优化后代码："><a href="#优化后代码：" class="headerlink" title="优化后代码："></a>优化后代码：</h3><p><code>第四题(4-2.jsp)</code></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">String path = request.getContextPath();</span><br><span class="line"></span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">  &lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &lt;title&gt;2-2&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%String[] dept = &#123;<span class="string">&quot;策划部&quot;</span>,<span class="string">&quot;销售部&quot;</span>,<span class="string">&quot;研发部&quot;</span>,<span class="string">&quot;人事部&quot;</span>,<span class="string">&quot;测试部&quot;</span>&#125;; %&gt;</span><br><span class="line"></span><br><span class="line">      &lt;h1 align=&quot;center&quot;&gt;员工信息查询&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;form id=<span class="string">&quot;form&quot;</span> name=<span class="string">&quot;forme&quot;</span> method = <span class="string">&quot;post&quot;</span> action = <span class="string">&quot;2-4.jsp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            员工姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user_name&quot;</span> id=<span class="string">&quot;user_name&quot;</span> size=<span class="string">&quot;5&quot;</span>&gt;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">            年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user_age&quot;</span> id=<span class="string">&quot;user_age&quot;</span> size=<span class="string">&quot;3&quot;</span>&gt;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">            所在部门：&lt;select name=<span class="string">&quot;bumen&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">                     &lt;%<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dept.length;i++)&#123;%&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;option value=&quot;&lt;%=dept[i] %&gt;&quot;&gt;&lt;%=dept[i] %&gt;&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;/select&gt; </span><br><span class="line"></span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">        &lt;% request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;%</span><br><span class="line"></span><br><span class="line">                String name = request.getParameter(<span class="string">&quot;user_name&quot;</span>);</span><br><span class="line"></span><br><span class="line">                String age = request.getParameter(<span class="string">&quot;user_age&quot;</span>);</span><br><span class="line"></span><br><span class="line">                String bumen = request.getParameter(<span class="string">&quot;bumen&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(name != <span class="keyword">null</span> &amp;&amp; age != <span class="keyword">null</span> &amp;&amp; bumen != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    out.print(<span class="string">&quot;员工姓名:&quot;</span>+request.getParameter(<span class="string">&quot;user_name&quot;</span>)+<span class="string">&quot;&amp;nbsp;&amp;nbsp;年龄:&quot;</span>+request.getParameter(<span class="string">&quot;user_age&quot;</span>)+<span class="string">&quot;&amp;nbsp;&amp;nbsp;所在部门:&quot;</span>+request.getParameter(<span class="string">&quot;bumen&quot;</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/p&gt;    </span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="截图："><a href="#截图：" class="headerlink" title="截图："></a>截图：</h3><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200413151506.png"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200413151548.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验二：jsp基本语法&quot;&gt;&lt;a href=&quot;#实验二：jsp基本语法&quot; class=&quot;headerlink&quot; title=&quot;实验二：jsp基本语法&quot;&gt;&lt;/a&gt;实验二：jsp基本语法&lt;/h2&gt;&lt;h3 id=&quot;实验环境：Myeclipse-10&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Web应用程序设计" scheme="https://blog.dhbxs.top/categories/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JSP" scheme="https://blog.dhbxs.top/tags/JSP/"/>
    
    <category term="MyEclipse" scheme="https://blog.dhbxs.top/tags/MyEclipse/"/>
    
    <category term="HTML" scheme="https://blog.dhbxs.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 基础学习记录</title>
    <link href="https://blog.dhbxs.top/posts/f29deca4.html"/>
    <id>https://blog.dhbxs.top/posts/f29deca4.html</id>
    <published>2020-04-06T03:54:45.000Z</published>
    <updated>2020-12-23T14:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="1显示时间-DisplayTime"><a href="#1显示时间-DisplayTime" class="headerlink" title="1显示时间(DisplayTime)"></a>1显示时间(DisplayTime)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayTime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (Scanner in = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> seconds = in.nextInt();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> hour = seconds/<span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> leftSeconds = seconds - <span class="number">3600</span>*hour;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> min = leftSeconds/<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> sec = leftSeconds%<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;%02d:%02d:%02d&quot;</span>,hour,min,sec);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hour*100/100+&quot;:&quot;+min*100/100+&quot;:&quot;+sec*100/100</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2华氏温度转摄氏温度-FahrenheitToCelsius"><a href="#2华氏温度转摄氏温度-FahrenheitToCelsius" class="headerlink" title="2华氏温度转摄氏温度(FahrenheitToCelsius)"></a>2华氏温度转摄氏温度(FahrenheitToCelsius)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FahrenheitToCelsius</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">            Scanner input = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;请输入华氏温度\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> fahrenheit = input.nextDouble();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> celsius = (fahrenheit - <span class="number">32</span>)*(<span class="number">5.0</span>/<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;摄氏温度为:%.2f\n&quot;</span>,celsius);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3分段计算水费-Water"><a href="#3分段计算水费-Water" class="headerlink" title="3分段计算水费(Water)"></a>3分段计算水费(Water)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Water</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        Scanner inpute = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入x的值：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> x = inpute.nextDouble();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(x &lt;= <span class="number">15</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;%.2f\n&quot;</span>,<span class="number">4.0</span>*x/<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;%.2f\n&quot;</span>,<span class="number">2.5</span>*x-<span class="number">10.5</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4冒泡排序-BubbleSort"><a href="#4冒泡排序-BubbleSort" class="headerlink" title="4冒泡排序(BubbleSort)"></a>4冒泡排序(BubbleSort)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> homework;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> []a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入10个无序数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Scanner input = <span class="keyword">new</span> Scanner (System.in)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> value = input.nextInt();</span><br><span class="line"></span><br><span class="line">                a[i] = value;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[j]) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> temp = a[i];</span><br><span class="line"></span><br><span class="line">                    a[i]=a[j];</span><br><span class="line"></span><br><span class="line">                    a[j]=temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5求两个数的最大公约数-CommonDivisor"><a href="#5求两个数的最大公约数-CommonDivisor" class="headerlink" title="5求两个数的最大公约数(CommonDivisor)"></a>5求两个数的最大公约数(CommonDivisor)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> homework;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonDivisor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两个数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Scanner input = <span class="keyword">new</span> Scanner (System.in)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n1=input.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> n2=input.nextInt();</span><br><span class="line"></span><br><span class="line">            System.out.println(commondivisor(n1,n2));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">commondivisor</span><span class="params">(<span class="keyword">int</span> n1,<span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1 &amp;&amp; i&lt;=n2;i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(n1%i == <span class="number">0</span> &amp;&amp; n2%i ==<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                temp=i;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6生成0-99随机数-RandomDemo"><a href="#6生成0-99随机数-RandomDemo" class="headerlink" title="6生成0~99随机数(RandomDemo)"></a>6生成0~99随机数(RandomDemo)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">int</span> number = r.nextInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">         System.out.println(number); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7判断回文串-CheckPalindrome"><a href="#7判断回文串-CheckPalindrome" class="headerlink" title="7判断回文串(CheckPalindrome)"></a>7判断回文串(CheckPalindrome)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> homework;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckPalindrome</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Scanner input = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line"></span><br><span class="line">            String s0 = input.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s0.length() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                StringBuilder s1 = <span class="keyword">new</span> StringBuilder(s0.substring(<span class="number">0</span>, s0.length()/<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                StringBuilder s2 = <span class="keyword">new</span> StringBuilder(s0.substring(s0.length()/<span class="number">2</span>, s0.length()));</span><br><span class="line"></span><br><span class="line">                s2.reverse();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(String.valueOf(s1).equals(String.valueOf(s2))) &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;这是一个回文串&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;这不是一个回文串&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                StringBuilder s1 = <span class="keyword">new</span> StringBuilder(s0.substring(<span class="number">0</span>, s0.length()/<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                StringBuilder s2 = <span class="keyword">new</span> StringBuilder(s0.substring(s0.length()/<span class="number">2</span> + <span class="number">1</span>, s0.length()));</span><br><span class="line"></span><br><span class="line">                s2.reverse();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(String.valueOf(s1).equals(String.valueOf(s2))) &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;这是一个回文串&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;这不是一个回文串&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8记事本-NoteBook"><a href="#8记事本-NoteBook" class="headerlink" title="8记事本(NoteBook)"></a>8记事本(NoteBook)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> notebook;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; notes = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        notes.add(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> notes.size();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> notes.get(index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNote</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        notes.remove(index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] list() &#123;</span><br><span class="line"></span><br><span class="line">        String[] a = <span class="keyword">new</span> String[notes.size()];</span><br><span class="line"></span><br><span class="line">        notes.toArray(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NoteBook notebook = <span class="keyword">new</span> NoteBook();</span><br><span class="line"></span><br><span class="line">        notebook.add(<span class="string">&quot;NO.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(notebook.getNote(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        notebook.add(<span class="string">&quot;No.2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(notebook.getNote(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        notebook.removeNote(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(notebook.getSize());</span><br><span class="line"></span><br><span class="line">        String[] a = notebook.list();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;notebook.getSize(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h2&gt;&lt;h3 id=&quot;1显示时间-DisplayTime&quot;&gt;&lt;a href=&quot;#1显示时间-DisplayTime&quot; c</summary>
      
    
    
    
    <category term="面向对象程序设计" scheme="https://blog.dhbxs.top/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://blog.dhbxs.top/tags/JAVA/"/>
    
    <category term="Eclipse" scheme="https://blog.dhbxs.top/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Java 小练</title>
    <link href="https://blog.dhbxs.top/posts/d59fbab.html"/>
    <id>https://blog.dhbxs.top/posts/d59fbab.html</id>
    <published>2020-04-05T15:56:43.000Z</published>
    <updated>2020-04-05T15:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动售货机"><a href="#自动售货机" class="headerlink" title="自动售货机"></a>自动售货机</h2><blockquote><p>实现基本的自动售货机的功能，包括商品种类显示，商品价格显示，商品余量显示，找零显示等 </p></blockquote><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> machine;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VendingMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> drinkNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;<span class="comment">//总共收到的钱</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> amount = <span class="number">0</span>;<span class="comment">//顾客投入的钱</span></span><br><span class="line"></span><br><span class="line">    String[] drink = &#123;<span class="string">&quot;1:苹果汁 &quot;</span>,<span class="string">&quot;2:可乐 &quot;</span>,<span class="string">&quot;3:牛奶 &quot;</span>,<span class="string">&quot;4:橙汁 &quot;</span>,<span class="string">&quot; 5:苏打水&quot;</span>&#125;;<span class="comment">//饮品种类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] price = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;<span class="comment">//饮品价格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] quantity = &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;<span class="comment">//所剩饮品数量</span></span><br><span class="line"></span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrompt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;饮品种类:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( i=<span class="number">0</span> ; i&lt;drink.length ; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;%s&quot;</span>,drink[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == drink.length) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chooseDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要购买饮品序号&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.drinkNumber = <span class="keyword">this</span>.in.nextInt()-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertMony</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请将纸币插入钞票口&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.amount = <span class="keyword">this</span>.in.nextInt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">        price = <span class="keyword">this</span>.price[drinkNumber];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(quantity[drinkNumber]&gt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (amount &gt; price) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;找您%d元\n&quot;</span>,(amount - price));</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;这是您要的%s，慢走不送\n&quot;</span>,drink[drinkNumber]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.total = amount - price + <span class="keyword">this</span>.total;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.quantity[drinkNumber]--;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(amount == price) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;这是您要的%s，慢走不送\n&quot;</span>,drink[drinkNumber]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.total += amount;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.quantity[drinkNumber]--;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;余额不够，退您%d元&quot;</span>,amount);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，商品缺货&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        VendingMachine m1 = <span class="keyword">new</span> VendingMachine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            m1.showPrompt();</span><br><span class="line"></span><br><span class="line">            m1.initDrink();</span><br><span class="line"></span><br><span class="line">            m1.chooseDrink();</span><br><span class="line"></span><br><span class="line">            m1.insertMony();</span><br><span class="line"></span><br><span class="line">            m1.getDrink();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自动售货机&quot;&gt;&lt;a href=&quot;#自动售货机&quot; class=&quot;headerlink&quot; title=&quot;自动售货机&quot;&gt;&lt;/a&gt;自动售货机&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;实现基本的自动售货机的功能，包括商品种类显示，商品价格显示，商品余量显示，找零显示等 &lt;/</summary>
      
    
    
    
    <category term="面向对象程序设计" scheme="https://blog.dhbxs.top/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://blog.dhbxs.top/tags/JAVA/"/>
    
    <category term="Eclipse" scheme="https://blog.dhbxs.top/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>win10简洁之道</title>
    <link href="https://blog.dhbxs.top/posts/fc1be4e5.html"/>
    <id>https://blog.dhbxs.top/posts/fc1be4e5.html</id>
    <published>2020-03-31T04:09:48.000Z</published>
    <updated>2020-12-23T12:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章大纲"><a href="#文章大纲" class="headerlink" title="文章大纲"></a>文章大纲</h2><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/win10%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%932.png" alt="win10简洁之道"></p><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>国内的Windows系统小伙伴肯定都体验过被各种流氓软件侵袭的困扰。比如说安装某压缩软件，却不知在后台已经安装了各种浏览器，绑定了各种主页，下载了某驱动卫士，而且还多了很多广告弹窗。甚至在你手动卸载后留下一篇狼藉，最后导致系统崩溃，蓝屏。</p><p>如何才能有效的规避这些坑，减少广告弹窗，提高系统运行效率，长期保持系统纯净，提高工作效率？</p><h2 id="纯净系统安装篇"><a href="#纯净系统安装篇" class="headerlink" title="纯净系统安装篇"></a>纯净系统安装篇</h2><h3 id="系统镜像的获取"><a href="#系统镜像的获取" class="headerlink" title="系统镜像的获取"></a>系统镜像的获取</h3><p>一个纯净无捆绑的系统才是一切起步的关键。大可不必去下载什么无脑系统安装镜像了，类似XX公司装机版，大多都在系统里植入了很多流氓软件，用起来很不舒服。</p><ul><li><p>MSDN</p><p>在<a href="http://msdn.itellyou.cn/">MSDN itell you</a>这个网站，可以下载到绝对无捆绑，纯净<code>windows7，8，10</code>等各种版本的<code>windows</code>系统<code>ISO</code>镜像。</p></li><li><p>微软官网</p><p>如果还是不放心的话，<a href="https://www.microsoft.com/zh-cn/software-download/windows10">微软官网</a>也是可以下载到最新的<code>win10</code>系统镜像。</p></li></ul><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p>如果使用的是win10系统，因为系统自带虚拟光驱，下载完系统ISO镜像后双击打开，找到<code>setup.exe</code>文件，双击打开该文件就可以傻瓜式安装系统了。如果使用的是比较低的系统版本像windows XP，windows 7等，那么需要有一个支持ISO压缩格式的压缩软件来解压ISO镜像。这里推荐<a href="http://www.bandisoft.com/bandizip/">Bandizip</a>这款压缩软件，建议下载安装<code>Bandizipv6.26</code>版本，最新版本含有广告，不推荐使用。</p><p>解压后，如下图<img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331132930.png" alt="1"></p><p>双击<code>setup.exe</code>安装即可。</p><ul><li><p>系统用户名</p><p>安装后，初始状态系统会引导创建系统用户名，这里推荐一定要用英文名。中文名兼容性不好，以后安装软件直接会因为路径识别问题报错，解决方法很少甚至无解，只能重装系统，带来不必要的麻烦。</p></li></ul><h2 id="浏览器篇"><a href="#浏览器篇" class="headerlink" title="浏览器篇"></a>浏览器篇</h2><h3 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h3><p>应该公认的就是<code>Chrome</code>浏览器了，浏览器市场份额最大的就是它了。国内很多浏览器也是用<code>Chrome</code>浏览器的<code>chromium</code>内核进行的二次开发，但是却夹杂这一些杂七杂八的东西，弹窗广告不说，非常消耗系统内存，不如原版好用，有官方的正版不用，为什么要跑去下载什么各种二次改版的。这里附上官网下载地址<a href="https://www.google.cn/chrome/">Chrome</a></p><ul><li><p>基本设置</p><p>安装后进行一些简单的设置，推荐使用 <a href="https://www.baidu.com/">www.baidu.com</a> 做浏览器主页，如果你设置了它，你会发现，浏览器打开速度明显加快了。因为主页是浏览器启动打开的第一个网页，如果使用某些第三方导航网站，会加载很多新闻广告，图片等资源，能快吗？当你打开浏览器想要使用搜索引擎搜索一些内容时，却在苦苦等待导航网站的加载，想想就很浪费时间，一触即达的感觉顿时无影无踪。</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331164558.png" alt="Chrome推荐设置1"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331164714.png" alt="Chrome推荐设置2"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331165049.png" alt="设置后首页"></p><p>瞬间清爽了很多！</p><ul><li><p>插件推荐</p></li><li><p><code>AdBlock</code>——广告拦截神器</p><p>打开扩展程序，搜索<code>AdBlock</code>，你就会看到如下图所示：</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/AdBlock.png" alt="AdBlock——最佳广告拦截工具"></p><p>点击添加至Chrome即可。</p><p>AdBlock能拦截大部分广告，普通浏览网页有它足够了，当然还有付费版，更强大的拦截能力，更友好的体验，土豪推荐。</p><ul><li><p>One Tab Plus ——一键收纳标签页，减少内存占用</p><p>当你打开一堆网页的时候，浏览器上方已经时密密麻麻的标签页，此时此刻，你的电脑内存也被消耗了很多，但是又因为找资料需求，不想关闭网页，那就试试这款插件吧。他能一键将你目前打开的网页地址记录下来，然后收纳到一个单独页面里，并将你之前打开的网页关闭，内存释放，同时又不会丢掉你的标签页记录，想要再次打开的时候，直接点击收纳进去的链接即可。</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331173114.png" alt="One Tab Plus标签效率管理扩展"></p><h3 id="新版Edge浏览器"><a href="#新版Edge浏览器" class="headerlink" title="新版Edge浏览器"></a>新版Edge浏览器</h3><p>在竞争多年后，微软还是决定采用Chrome浏览器的chromium内核。在新版的Edge中，简直焕然新生。浏览网页的兼容性更好了，还继承了原来流畅滑动网页的特性，畅享丝滑体验。</p><p>官网下载地址<a href="https://www.microsoft.com/zh-cn/edge">https://www.microsoft.com/zh-cn/edge</a></p><h2 id="系统优化篇"><a href="#系统优化篇" class="headerlink" title="系统优化篇"></a>系统优化篇</h2><h3 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h3><ul><li><p><code>Windows Defender</code></p><p>如果时普通用户，可以不安装杀毒软件。系统自带的<code>Windows Defender</code>已经很出色了，防病毒能力绝对不是虚的。如果想要防一些国内的流氓捆绑安装，以及广告什么的，推荐使用<code>火绒</code><a href="https://www.huorong.cn/">https://www.huorong.cn/</a> </p></li><li><p><code>火绒</code></p><p>这款国内的杀毒软件一改捆绑的作风，在后台你都感觉不到他的存在，非常省内存。偶尔会弹出一个更新完毕窗口，会让你感到踏实，因为病毒库更新了。还有它内置的一款工具，<code>火绒剑</code>能分析出很多隐藏的进程，对分析病毒行为很有帮助。普通用户推荐使用它的广告弹窗拦截的小功能，别小看它，能拦截很多桌面级弹窗广告，而且正真做到了静默无打扰。</p></li></ul><p><strong>详细设置如下</strong>：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331180633.png" alt="火绒安全"></p><p>1.打开弹窗拦截：</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331180737.png" alt="弹窗拦截"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/%E7%81%AB%E7%BB%92%E5%BC%B9%E7%AA%97%E8%AE%BE%E7%BD%AE.png" alt="软件设置"></p><p>2.点击软件设置，然后取消勾选开启托盘消息，关闭设置页面</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331181142.png" alt="托盘消息"></p><ul><li><p><code>UAC权限</code></p><p>如果还想加强对流氓软件的静默安装的管控的话，推荐把系统<code>UAC</code>权限调到最严格。这样当软件静默安装时，系统会弹出确认警告，只有手动点击确定后，才会安装，如果点击取消，软件是不会运行的。</p></li></ul><p><strong>详细设置如下：</strong></p><p>1.在系统搜索框内搜索UAC，找到后点击打开</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331181645.png" alt="搜索UAC"></p><p>2.将其调到始终通知，然后点击确定即可</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331181845.png" alt="用户账户控制设置"></p><h3 id="系统美化"><a href="#系统美化" class="headerlink" title="系统美化"></a>系统美化</h3><ul><li><p><code>Translucent TB</code></p><p>Translucent TB这款软件是微软应用商店里的，直接搜索下载即可。有了它能实现任务栏的透明美化效果，并且安全无广告，几乎不占用内存的一款小软件。</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331212856.png" alt="任务栏透明效果"></p><ul><li><p><code>全屏开始菜单</code></p><p>自从用了全屏开始菜单就再也回不去了，桌面上的软件图标不见了，换来更清爽的工作环境。用什么软件直接点开始菜单，而且做好了分类后，很方便就能找到所需软件。</p></li></ul><p><strong>详细设置步骤：</strong></p><p>任务栏右键–&gt;任务栏设置–&gt;开始–&gt;使用全屏开始屏幕</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331213452.png" alt="全屏开始屏幕"></p><ul><li><p><code>腾讯桌面整理</code></p><p>相信你一定听说过<code>Fences</code>这款桌面整理软件，没错，他在众多网友中评论也非常不错，但是它收费。腾讯桌面整理软件就相当于他的免费尝鲜版，就一般使用而言，完全够用。</p><p>这是他的官网<a href="https://guanjia.qq.com/product/zmzl/">腾讯桌面整理</a> 切记要下载他的<code>桌面整理独立版</code>，否则腾讯系的捆绑就又回来了。</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/%E8%85%BE%E8%AE%AF%E6%A1%8C%E9%9D%A2%E6%95%B4%E7%90%86.png" alt="腾讯桌面整理"></p><h2 id="不完全防捆绑广告指南篇"><a href="#不完全防捆绑广告指南篇" class="headerlink" title="不完全防捆绑广告指南篇"></a>不完全防捆绑广告指南篇</h2><h3 id="压缩软件"><a href="#压缩软件" class="headerlink" title="压缩软件"></a>压缩软件</h3><ul><li><p><code>Bandizip</code></p><p>官网<a href="http://www.bandisoft.com/bandizip/">Bandizip</a></p><p>该软件在前文中也提到过，这款软件解压速度快，支持的压缩格式众多，而且v6.26版本之前的版本是无广告的，良心应用。比国内压缩软件好太多了。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331215334.png" alt="Bandizip"></p></li></ul><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><ul><li><p><code>Listary</code></p><p>官网<a href="https://www.listary.com/">Listary</a></p><p>这款软件小巧方便，在任何地方，双击 <kbd>Ctrl</kbd> 就能唤出搜索界面。从此不用翻遍C盘D盘去找文件，想要的搜索即可，速度比Windows资源管理器里的搜索快多了。而且还能直接用搜索引擎。传统搜索方式是双击桌面浏览器图标等待打开后，在搜索框输入关键词进行搜索，但是现在你只要双击 <kbd>Ctrl</kbd> 在弹出的搜索框输入<code>bd</code> + <kbd>空格</kbd> + “关键词” + <kbd>Enter</kbd> 就可以了，对于程序员这类经常使用键盘的人来说再也不用离开键盘找鼠标了，全部键盘完成。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331220435.png" alt="Listary"></p></li></ul><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><ul><li><p><code>Motrix</code></p><p>官网<a href="https://motrix.app/zh-CN/">Motrix</a></p><p>试试这款Github标星<code>19.6K</code>的开源应用吧！它是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链、百度网盘等资源。界面简洁易用，纯净无广告，能跑满带宽的下载软件，并且UI做的也很棒。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331220935.png" alt="Motrix"></p></li><li><p><code>Internet Download Manager</code></p><p>官网<a href="http://www.internetdownloadmanager.com/">IDM</a></p><p>老牌浏览器下载软件了。一般在下载国外网站上的文件时，会非常的满，动不动就需几个小时。但是有了它几乎能跑满带宽，它利用多线程技术，同时向服务器发出多次下载请求并且同时下载，然后将各自下载的片段拼接起来形成完整的文件。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331221411.png" alt="IDM"></p></li></ul><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><ul><li><p><code>Geek Uninstaller</code></p><p>官网<a href="https://geekuninstaller.com/">Geek Uninstaller</a></p><p>以前卸载软件后总是有各种注册表残留，以及文件残留等等。用这款软件卸载时会自动扫描在注册表的残留项以及其他残留并一起删除，再也不用担心卸载流氓软件后还残留在系统的流氓进程了。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331221925.png" alt="Geek Uninstaller"></p></li></ul><h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><ul><li><p>Microsoft OneDrive</p><p>苹果有iCloud，华为有华为云服务，那我们普通笔记本用什么？那就是微软的OneDrive。办公所有的word，ppt，excel，统统都能云同步。本地截屏也能自动上传OneDrive，而且同步文件速度也很快，最主要是跟Windows系统无缝集成，好用。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331223847.png" alt="OneDrive"></p></li><li><p>Microsoft Office 2019</p><p>国内的WPS也不错，但前提是你能忍受弹窗广告。如果不能，那就用微软自带的吧，还能和OneDrive搭配使用，效果比WPS好多了。</p></li><li><p>Microsoft ToDo</p><p>自从微软收购了奇妙清单后，Microsoft ToDo功能越来越完善了，每日的工作日程，任务清单尽可能的写道这里来，同步很方便，Android，iPhone安装相应的Microsoft ToDo APP也能查看安排。</p></li><li><p>Microsoft 日历</p><p>用日历来安排周计划，月计划，年计划再合适不过了，还能安排会议提醒等功能，在桌面右下角点击即可快速查看，同时还能使用outlook邮箱提醒，同步到手机等其他终端设备。</p></li><li><p>Adobe Acrobat DC</p><p>经常用到PDF转Word，Word转PDF，把图片做成PDF，批量转换PDF等等所有与PDF有关的操作都可以在Adobe Acrobat DC上轻松完成。</p></li><li><p>PotPlayer</p><p>官网<a href="https://daumpotplayer.com/download/">PotPlayer</a></p><p>地表最强视频播放器，拥有出色的视频解码能力，支持非常多的视频格式。重点是输入视频链接地址，不用下载也能播放网络中的电影等。</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://gitee.com/dhbxs/blogImage/raw/master/img/20200331230815.png" alt="PotPlayer"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章大纲&quot;&gt;&lt;a href=&quot;#文章大纲&quot; class=&quot;headerlink&quot; title=&quot;文章大纲&quot;&gt;&lt;/a&gt;文章大纲&lt;/h2&gt;&lt;p&gt;&lt;img src= &quot;https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/202</summary>
      
    
    
    
    <category term="系统优化" scheme="https://blog.dhbxs.top/categories/%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="win10" scheme="https://blog.dhbxs.top/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>MySQL实验三——数据查询</title>
    <link href="https://blog.dhbxs.top/posts/63e76aeb.html"/>
    <id>https://blog.dhbxs.top/posts/63e76aeb.html</id>
    <published>2020-03-18T03:01:48.000Z</published>
    <updated>2020-03-18T03:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1．实验的基本要求"><a href="#1．实验的基本要求" class="headerlink" title="1．实验的基本要求"></a>1．实验的基本要求</h2><p>（1） 知道什么是查询。</p><p>（2） 掌握数据库的单表查询。</p><p>（3） 掌握数据库的聚集函数及其使用。</p><p>（4） 掌握分组的概念和使用</p><h2 id="2．实验概述"><a href="#2．实验概述" class="headerlink" title="2．实验概述"></a>2．实验概述</h2><p>（1） 查询指定属性列；</p><p>（2） 查询指定的元组；</p><p>（3） 查询分组；</p><p>（4） 查询数据汇总；</p><h2 id="3．实验的基本仪器设备和耗材"><a href="#3．实验的基本仪器设备和耗材" class="headerlink" title="3．实验的基本仪器设备和耗材"></a>3．实验的基本仪器设备和耗材</h2><p> 计算机</p><blockquote><p>在实验二的基础上进行操作 <a href="https://dhbxs.club/navicat-ji-ben-cao-zuo/">实验二</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sno 学号,Sname 姓名,Sage 年龄 <span class="keyword">FROM</span> student; </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sname 姓名,Sage 年龄 <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sage<span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sage) <span class="keyword">FROM</span> student); </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sname 姓名,entrydate 入学日期 <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span>&quot;刘%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sno 学号,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 选课数 <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student.Sno 学号,Sname 姓名,cname 课程名,Grade 成绩 <span class="keyword">FROM</span> student,sc,course <span class="keyword">where</span> student.Sno <span class="operator">=</span> sc.Sno <span class="keyword">and</span> course.cno <span class="operator">=</span>sc.cno <span class="keyword">and</span> Grade <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(Grade) <span class="keyword">FROM</span> sc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> course1.cname 课程,course2.cname 先修课程 <span class="keyword">FROM</span> course course1,course course2 <span class="keyword">WHERE</span> course1.cpno <span class="operator">=</span> course2.Cno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student.<span class="operator">*</span>,grade <span class="keyword">FROM</span> student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> sc <span class="keyword">ON</span> student.sno <span class="operator">=</span> sc.sno;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实验截图记录"><a href="#实验截图记录" class="headerlink" title="实验截图记录"></a>实验截图记录</h2><p>（1）    查找学生的学号、姓名和年龄，按照“学号”“姓名”“年龄”列名显示；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wexZ8.png" alt="8wexZ8.png"></p><p>（2）    查询大于平均年龄的学生年龄和姓名；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wmAs0.png" alt="8wmAs0.png"></p><p>（3）    查询姓刘的学生姓名和入学日期，因为没有填入入学日期，故显示为null；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wmMW9.png" alt="8wmMW9.png"></p><p>（4）    统计每个学生选修的课程总数；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wnYXq.png" alt="8wnYXq.png"></p><p>（5）    查询最高成绩学生的学号、姓名、成绩和课程名称；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wnr9J.png" alt="8wnr9J.png"></p><p>（6）    查询每一门课程的课程名和先修课程名；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wn7jI.png" alt="8wn7jI.png"></p><p>（7）    显示所有学生及其课程成绩；</p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://s1.ax1x.com/2020/03/18/8wnjUS.png" alt="8wnjUS.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1．实验的基本要求&quot;&gt;&lt;a href=&quot;#1．实验的基本要求&quot; class=&quot;headerlink&quot; title=&quot;1．实验的基本要求&quot;&gt;&lt;/a&gt;1．实验的基本要求&lt;/h2&gt;&lt;p&gt;（1） 知道什么是查询。&lt;/p&gt;
&lt;p&gt;（2） 掌握数据库的单表查询。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="数据库系统原理及应用" scheme="https://blog.dhbxs.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="MySQL" scheme="https://blog.dhbxs.top/tags/MySQL/"/>
    
    <category term="Navicat" scheme="https://blog.dhbxs.top/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>栈与队列的应用</title>
    <link href="https://blog.dhbxs.top/posts/2d35e3e5.html"/>
    <id>https://blog.dhbxs.top/posts/2d35e3e5.html</id>
    <published>2020-03-18T02:37:46.000Z</published>
    <updated>2020-12-23T14:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h2><p>1：依据顺序栈存储结构的定义如下：（利用以下的常用操作设计算法并实现完成2、3题）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAXSIZE  100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">        SElemType   *base;</span><br><span class="line"></span><br><span class="line">        SElemType   *top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> stacksize;</span><br><span class="line"></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调试并测试常用操作如下：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitStack</span><span class="params">( SqStack &amp;S )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">( SqStack S )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">( SqStack S )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">( SqStack &amp;S, SElemType e)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">( SqStack &amp;S, SElemType &amp;e)</span>  </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>2：设单链表中存放n个字符，试设计一个算法，判断该字符串是否中心对称。</p><p>3：利用栈来实现算术表达式求值的算法。<strong>程序运行时，输入合法的算术表达式（中间值及最终结果要在0～9之间，可以包括加减乘除和括号），便可输出相应的计算结果。</strong></p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _STACK_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _STACK_H_</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAXSIZE  100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//栈结构体</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">        SElemType   *base;</span><br><span class="line"></span><br><span class="line">        SElemType   *top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> stacksize;</span><br><span class="line"></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>//单链表结构体</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">     SElemType   data;</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>  *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    S.base = <span class="keyword">new</span> SElemType [MAXSIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!S.base)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"></span><br><span class="line">    S.top = S.base;</span><br><span class="line"></span><br><span class="line">    S.stacksize = MAXSIZE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈满栈空</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(S.top - S.base == S.stacksize)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//求栈长</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (S.top - S.base);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈函数</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S,SElemType e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">StackEmpty</span>(S))&#123;</span><br><span class="line"></span><br><span class="line">        *S.top++ = e;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈函数</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S,SElemType &amp;e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(S.top == S.base)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    e = *--S.top;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//取栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(S.top != S.base)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *(S.top<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单链表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_L</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     L=<span class="keyword">new</span> LNode;</span><br><span class="line"></span><br><span class="line">     L-&gt;next=<span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的单链表</span></span><br><span class="line"></span><br><span class="line">    LinkList p;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// InitList_L(L);</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line"></span><br><span class="line">        p=<span class="keyword">new</span> LNode; <span class="comment">//生成新结点</span></span><br><span class="line"></span><br><span class="line">           cin&gt;&gt;p-&gt;data; <span class="comment">//输入元素值</span></span><br><span class="line"></span><br><span class="line">        p-&gt;next=L-&gt;next;L-&gt;next=p;     <span class="comment">//插入到表头</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印单链表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList_L</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkList p=L-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        p=p-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表删除元素</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    LinkList p=L,q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((p-&gt;next) &amp;&amp; (j&lt;i<span class="number">-1</span>))&#123;</span><br><span class="line"></span><br><span class="line">            p=p-&gt;next;</span><br><span class="line"></span><br><span class="line">            ++j;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next) || (j&gt;i<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">        q=p-&gt;next;</span><br><span class="line"></span><br><span class="line">        p-&gt;next=q-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取单链表元素值</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L,<span class="keyword">int</span> i,SElemType &amp;e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkList p=L-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j&lt;i)&#123;</span><br><span class="line"></span><br><span class="line">        p=p-&gt;next;</span><br><span class="line"></span><br><span class="line">        ++j;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    e=p-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _STACK_H_</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">TestStack</span><span class="params">(SqStack &amp;S,SElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Center</span><span class="params">(LinkList &amp;L,SqStack &amp;S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">EvaluateExpression</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SElemType <span class="title">Precede</span><span class="params">(SElemType t1,SElemType t2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(SElemType c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SElemType <span class="title">Operate</span><span class="params">(SElemType a,SElemType theta,SElemType b)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkList L;</span><br><span class="line"></span><br><span class="line">    SqStack S;</span><br><span class="line"></span><br><span class="line">    SElemType e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SqStack *p = &amp;S;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第1题\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TestStack</span>(S,e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第2题\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要判断中心对称的字符串，长度为5\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CreateList_L</span>(L,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ListDelete</span>(L,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PrintList_L(L);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Center</span>(L,S))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该字符串不是中心对称的字符串\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该字符串是中心对称的字符串\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第3题\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入算术表达式,并以#结束.&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">EvaluateExpression</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//栈基础测试函数</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">TestStack</span><span class="params">(SqStack &amp;S,SElemType &amp;e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前栈的长度为：&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">StackLength</span>(S) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入将要入栈的元素：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Push</span>(S,e);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前栈的长度为：&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">StackLength</span>(S) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pop</span>(S,e);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;出栈：&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; e &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前栈的长度为：&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">StackLength</span>(S) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否中心对称</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Center</span><span class="params">(LinkList &amp;L,SqStack &amp;S)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    SElemType e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">GetElem</span>(L,i,e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(e == <span class="built_in">GetTop</span>(S))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Pop</span>(S,e);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Push</span>(S,e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">StackLength</span>(S))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GetElem(LinkList L,int i,SElemType &amp;e)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">EvaluateExpression</span><span class="params">()</span> </span>&#123;<span class="comment">//算术表达式求值的算符优先算法，设OPTR和OPND分别为运算符栈和操作数栈</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    SqStack OPTR, OPND;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch, theta, a, b, x;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitStack</span>(OPND); <span class="comment">//初始化OPND操作数栈</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitStack</span>(OPTR); <span class="comment">//初始化OPTR运算符栈</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Push</span>(OPTR, <span class="string">&#x27;#&#x27;</span>); <span class="comment">//将表达式起始符“#”压入OPTR栈</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;#&#x27;</span> || (<span class="built_in">GetTop</span>(OPTR) != <span class="string">&#x27;#&#x27;</span>)) <span class="comment">//表达式没有扫描完毕或OPTR的栈顶元素不为“#”</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">In</span>(ch)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Push</span>(OPND, ch);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="comment">//ch不是运算符则进OPND栈</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">Precede</span>(<span class="built_in">GetTop</span>(OPTR), ch)) <span class="comment">//比较OPTR的栈顶元素和ch的优先级</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>: <span class="comment">//栈顶元素优先级低</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">Push</span>(OPTR, ch);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch); <span class="comment">//当前字符ch压入OPTR栈，读入下一字符ch</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="built_in">Pop</span>(OPTR, theta); <span class="comment">//弹出OPTR栈顶的运算符</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">Pop</span>(OPND, b);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">Pop</span>(OPND, a); <span class="comment">//弹出OPND栈顶的两个运算数</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">Push</span>(OPND, <span class="built_in">Operate</span>(a, theta, b)); <span class="comment">//将运算结果压入OPND栈</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>: <span class="comment">//OPTR的栈顶元素是“(”且ch是“)”</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">Pop</span>(OPTR, x);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch); <span class="comment">//弹出OPTR栈顶的“(”，读入下一字符ch</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="comment">//switch</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">//while</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetTop</span>(OPND); <span class="comment">//OPND栈顶元素即为表达式求值结果</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(SElemType c)</span><span class="comment">// 应在前面有定义typedef char SElemType;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="comment">// 判断c是否为运算符</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(c)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:<span class="keyword">return</span> <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:<span class="keyword">return</span> <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:<span class="keyword">return</span> <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:<span class="keyword">return</span> <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:<span class="keyword">return</span> <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:<span class="keyword">return</span> <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:<span class="keyword">return</span> OVERFLOW;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="function">SElemType <span class="title">Precede</span><span class="params">(SElemType t1,SElemType t2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="comment">//根据教材表3.1，判断两个运算符的优先关系</span></span><br><span class="line"></span><br><span class="line">    SElemType f;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(t2)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="string">&#x27;(&#x27;</span>||t1==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="string">&#x27;(&#x27;</span>||t1==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//……//补充完整</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="string">&#x27;*&#x27;</span> || t1==<span class="string">&#x27;/&#x27;</span> || t1==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="string">&#x27;*&#x27;</span> || t1==<span class="string">&#x27;/&#x27;</span> || t1==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            f=<span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;=&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;=&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                f=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function">SElemType <span class="title">Operate</span><span class="params">(SElemType a,SElemType theta,SElemType b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SElemType c;</span><br><span class="line"></span><br><span class="line">    a=a<span class="number">-48</span>;</span><br><span class="line"></span><br><span class="line">    b=b<span class="number">-48</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(theta)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        case&#x27;+&#x27;:c=a+b+48;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">break</span>;<span class="comment">//……//补充完整</span></span><br><span class="line"></span><br><span class="line">        case&#x27;-&#x27;:c=a-b+48;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        case&#x27;*&#x27;:c=a*b+48;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        case&#x27;/&#x27;:c=a/b+48;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实验运行结果"><a href="#实验运行结果" class="headerlink" title="实验运行结果"></a>实验运行结果</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第<span class="number">1</span>题</span><br><span class="line"></span><br><span class="line">当前栈的长度为：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">请输入将要入栈的元素：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">当前栈的长度为：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">出栈：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">当前栈的长度为：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">第<span class="number">2</span>题</span><br><span class="line"></span><br><span class="line">请输入要判断中心对称的字符串，长度为<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">该字符串不是中心对称的字符串</span><br><span class="line"></span><br><span class="line">第<span class="number">3</span>题</span><br><span class="line"></span><br><span class="line">请输入算术表达式,并以#结束.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">3</span>/<span class="number">3</span>+(<span class="number">2</span>*<span class="number">3</span>)<span class="number">-2</span>#</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Process returned <span class="number">0</span> (<span class="number">0x0</span>)   execution time : <span class="number">37.894</span> s</span><br><span class="line"></span><br><span class="line">Press any key to <span class="keyword">continue</span>.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第<span class="number">1</span>题</span><br><span class="line"></span><br><span class="line">当前栈的长度为：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">请输入将要入栈的元素：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">当前栈的长度为：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">出栈：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">当前栈的长度为：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">第<span class="number">2</span>题</span><br><span class="line"></span><br><span class="line">请输入要判断中心对称的字符串，长度为<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">该字符串是中心对称的字符串</span><br><span class="line"></span><br><span class="line">第<span class="number">3</span>题</span><br><span class="line"></span><br><span class="line">请输入算术表达式,并以#结束.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">3</span>*<span class="number">2</span><span class="number">-3</span>/<span class="number">3</span>#</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Process returned <span class="number">0</span> (<span class="number">0x0</span>)   execution time : <span class="number">28.153</span> s</span><br><span class="line"></span><br><span class="line">Press any key to <span class="keyword">continue</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验题目&quot;&gt;&lt;a href=&quot;#实验题目&quot; class=&quot;headerlink&quot; title=&quot;实验题目&quot;&gt;&lt;/a&gt;实验题目&lt;/h2&gt;&lt;p&gt;1：依据顺序栈存储结构的定义如下：（利用以下的常用操作设计算法并实现完成2、3题）&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="C语言" scheme="https://blog.dhbxs.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse常用快捷键备忘</title>
    <link href="https://blog.dhbxs.top/posts/7eb82307.html"/>
    <id>https://blog.dhbxs.top/posts/7eb82307.html</id>
    <published>2020-03-15T01:27:44.000Z</published>
    <updated>2020-12-23T14:48:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>以下资料均来自网络整理，如有侵权，联系删除</em></p><h2 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h2><p>| 快捷键 | 功能描述 |</p><p>|:–:|:–|</p><p>|Ctrl+1|快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）|</p><p>|Ctrl+Shift+F|格式化当前代码</p><p>|Ctrl+Shift+M|添加类的import导入</p><p>|Ctrl+Shift+O|组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）</p><p>|Ctrl+Y|重做（与撤销Ctrl+Z相反）</p><p>|Alt+/|内容辅助（最常用）</p><p>|Ctrl+D|删除当前行或者多行</p><p>|Alt+↓|当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）</p><p>|Alt+↑|当前行和上面一行交互位置（同上）</p><p>|Ctrl+Alt+↓|复制当前行到下一行（复制增加）</p><p>|Ctrl+Alt+↑|复制当前行到上一行（复制增加）</p><p>|Shift+Enter|在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）</p><p>|Ctrl+/|注释当前行,再按则取消注释</p><h2 id="移动类"><a href="#移动类" class="headerlink" title="移动类"></a>移动类</h2><p>| 快捷键 | 功能描述 |</p><p>|:—:|:—|</p><p>|Ctrl+←|光标移到左边单词的开头</p><p>|Ctrl+→|光标移到右边单词的末尾</p><h2 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h2><p>| 快捷键 | 功能描述 |</p><p>|:—:|:—|</p><p>|Ctrl+K|参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）</p><p>|Ctrl+Shift+K|参照选中的Word快速定位到上一个</p><p>|Ctrl+J|正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）</p><p>|Ctrl+Shift+J|反向增量查找（和上条相同,只不过是从后往前查）</p><p>|Ctrl+Shift+U|列出所有包含字符串的行</p><p>|Ctrl+H    |打开搜索对话框</p><p>|Ctrl+G    |工作区中的声明</p><p>|Ctrl+Shift+G|工作区中的引用</p><h2 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h2><p>| 快捷键 | 功能描述 |</p><p>|:—:|:—|</p><p>|Alt+Shift+↑|    选择封装元素</p><p>|Alt+Shift+←|选择上一个元素</p><p>|Alt+Shift+→|选择下一个元素</p><p>|Shift+←|从光标处开始往左选择字符</p><p>|Shift+→|从光标处开始往右选择字符</p><p>|Ctrl+Shift+←|    选中光标左边的单词</p><p>|Ctrl+Shift+→|    选中光标右边的单词</p><h2 id="导航类"><a href="#导航类" class="headerlink" title="导航类"></a>导航类</h2><p>| 快捷键 | 功能描述 |</p><p>|:—:|:—|</p><p>|Ctrl+Shift+T|搜索类（包括工程和关联的第三jar包）</p><p>|Ctrl+Shift+R|搜索工程中的文件</p><p>|Ctrl+E|快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）</p><p>|F4|打开类型层次结构</p><p>|F3|跳转到声明处</p><p>|Alt+←|前一个编辑的页面</p><p>|Alt+→|下一个编辑的页面</p><p>|Ctrl+PageUp/PageDown|在编辑器中，切换已经打开的文件</p><p>| 快捷键 | 功能描述 |</p><p>|:—:|:—|</p><p>|F5|    单步跳入</p><p>|F6|    单步跳过</p><p>|F7|    单步返回</p><p>|F8|    继续</p><p>|Ctrl+Shift+D|    显示变量的值</p><p>|Ctrl+Shift+B|    在当前行设置或者去掉断点</p><p>|Ctrl+R    |运行至行(超好用，可以节省好多的断点)</p><p><em>以上资料均来自网络整理，如有侵权，联系删除</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;以下资料均来自网络整理，如有侵权，联系删除&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;编辑类&quot;&gt;&lt;a href=&quot;#编辑类&quot; class=&quot;headerlink&quot; title=&quot;编辑类&quot;&gt;&lt;/a&gt;编辑类&lt;/h2&gt;&lt;p&gt;| 快捷键 | 功能描述 |&lt;/p&gt;
&lt;p&gt;|:–:|:</summary>
      
    
    
    
    <category term="资料备忘整理" scheme="https://blog.dhbxs.top/categories/%E8%B5%84%E6%96%99%E5%A4%87%E5%BF%98%E6%95%B4%E7%90%86/"/>
    
    
    <category term="JAVA" scheme="https://blog.dhbxs.top/tags/JAVA/"/>
    
    <category term="Eclipse" scheme="https://blog.dhbxs.top/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>MySQL实验二——数据定义</title>
    <link href="https://blog.dhbxs.top/posts/9c002f41.html"/>
    <id>https://blog.dhbxs.top/posts/9c002f41.html</id>
    <published>2020-03-07T15:49:02.000Z</published>
    <updated>2020-12-23T14:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSDN同名博文传送门：<a href="https://blog.csdn.net/ChaoYang_183/article/details/104871387">https://blog.csdn.net/ChaoYang_183/article/details/104871387</a></p></blockquote><h2 id="·用命令创建关系对象"><a href="#·用命令创建关系对象" class="headerlink" title="·用命令创建关系对象"></a>·用命令创建关系对象</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line"></span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"></span><br><span class="line">    Sname <span class="type">CHAR</span> (<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"></span><br><span class="line">    Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    Sage <span class="type">SMALLINT</span>,</span><br><span class="line"></span><br><span class="line">    Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</span><br><span class="line"></span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"></span><br><span class="line">    cname <span class="type">CHAR</span>(<span class="number">40</span>),</span><br><span class="line"></span><br><span class="line">    cpno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"></span><br><span class="line">    ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (cpno) <span class="keyword">REFERENCES</span> course (cno)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line"></span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line"></span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"></span><br><span class="line">    Grade <span class="type">SMALLINT</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> student(sno),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (cno) <span class="keyword">REFERENCES</span> Course(cno)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="·将数据添加到关系对象内"><a href="#·将数据添加到关系对象内" class="headerlink" title="·将数据添加到关系对象内"></a>·将数据添加到关系对象内</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;李勇&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;刘晨&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;201215123&#x27;</span>,<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;MA&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;张立&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;数据处理&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;操作系统&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;PASCAL语言&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;信息系统&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC <span class="keyword">VALUES</span>(<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">92</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC <span class="keyword">VALUES</span>(<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">85</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC <span class="keyword">VALUES</span>(<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">88</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC <span class="keyword">VALUES</span>(<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC <span class="keyword">VALUES</span>(<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">80</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="·在student关系内添加一列entrydaty属性（日期类型"><a href="#·在student关系内添加一列entrydaty属性（日期类型" class="headerlink" title="·在student关系内添加一列entrydaty属性（日期类型)"></a>·在student关系内添加一列entrydaty属性（日期类型)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> entrydate <span class="type">DATE</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="·实验截图"><a href="#·实验截图" class="headerlink" title="·实验截图"></a>·实验截图</h2><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200315001740290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYW9ZYW5nXzE4Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="student表"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200315001808859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYW9ZYW5nXzE4Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="course表"></p><p><img src= "https://cdn.jsdelivr.net/gh/zhao-v/blog-img/img/20201019233758.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200315001831364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYW9ZYW5nXzE4Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="sc表"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CSDN同名博文传送门：&lt;a href=&quot;https://blog.csdn.net/ChaoYang_183/article/details/104871387&quot;&gt;https://blog.csdn.net/ChaoYang_183/articl</summary>
      
    
    
    
    <category term="数据库系统原理及应用" scheme="https://blog.dhbxs.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="MySQL" scheme="https://blog.dhbxs.top/tags/MySQL/"/>
    
    <category term="Navicat" scheme="https://blog.dhbxs.top/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现顺序表的增删改查合并等操作</title>
    <link href="https://blog.dhbxs.top/posts/1215031067.html"/>
    <id>https://blog.dhbxs.top/posts/1215031067.html</id>
    <published>2020-03-02T16:56:09.000Z</published>
    <updated>2020-03-02T16:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验：顺序表的应用"><a href="#实验：顺序表的应用" class="headerlink" title="实验：顺序表的应用"></a>实验：顺序表的应用</h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1．掌握如何将算法转换为程序；<br>2．熟悉顺序存储结构；<br>3．熟悉顺序表的操作；<br>4．熟悉顺序表的应用。</p><h2 id="二、实验要求"><a href="#二、实验要求" class="headerlink" title="二、实验要求"></a>二、实验要求</h2><p>1.程序要有注释，包括对总体功能、关键句、段的说明；<br>2.源程序必须调试通过，对每个输入的要求以及输出要有清晰的提示。程序要具有一定的健壮性，即当输入数据非法时，程序也能适当地做出反应，如插入删除时指定的位置不对等。</p><h2 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h2><p>1．实验题目<br>（1）完成顺序表的基本运算：初始化、显示、求长度、判空、判满、插入、删除、按位置取元素、按值查找等，并编写主函数测试算法。<br>（2）)设计算法：将一个元素插入到有序的顺序表中，使顺序表仍有序，并编写主函数测试算法。</p><p>（3）设A和B两个顺序表，其元素按从小到大的顺序排列。编写一个算法将A和B的全部元素合并到有序顺序表C中，并编写主函数测试算法。<br>   提示：有序表的合并；<br>         有序表的产生，可以人为输入，也可以调用（2）的算法来实现。</p><p>2．数据结构的设计：<br>所选数据结构为顺序表。<br>3．算法描述：<br>   （2）用循环给顺序表赋初值，将要插入的数据从前往后一个一个和原顺序表元素比较，当该数据比顺序表此该位置的值大，小于或等于原顺序表的后一个值时，记录该位置，然后将数据插入到该位置。<br>   （3）在A，B都没合并完的前提下，用while循环一个个比较A和B里边的元素值，谁小，就把谁放到C里，以此类推。</p><h2 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现"></a>四、算法实现</h2><blockquote><p>头文件：table.h</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _TABLE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TABLE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Size 5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> * head;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125;table;</span><br><span class="line"> </span><br><span class="line"><span class="function">table <span class="title">initTable</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TableLength</span><span class="params">(table t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyTable</span><span class="params">(table t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fullTable</span><span class="params">(table t)</span></span>;</span><br><span class="line"><span class="function">table <span class="title">addTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="function">table <span class="title">insertTable</span><span class="params">(table t,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="function">table <span class="title">mergeTable</span><span class="params">(table t1,table t2,table t3)</span></span>;</span><br><span class="line"><span class="function">table <span class="title">delTable</span><span class="params">(table t,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectTable</span><span class="params">(table t,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTable</span><span class="params">(table t,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="function">table <span class="title">amendTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> newElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayTable</span><span class="params">(table t)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TABLE_H</span></span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>主函数：main.c</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;table.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,add=<span class="number">0</span>,elem=<span class="number">0</span>;</span><br><span class="line">    table t1=initTable();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化后赋值</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=Size; i++) &#123;</span><br><span class="line">        t1.head[i<span class="number">-1</span>]=i;</span><br><span class="line">        t1.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原顺序表：\n&quot;</span>);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前顺序表长度为：%d\n&quot;</span>,TableLength(t1));</span><br><span class="line">    <span class="keyword">if</span> (fullTable(t1))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;当前顺序表已满\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//删除指定元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的元素:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;elem);</span><br><span class="line">    t1=delTable(t1, elem);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除%d元素后，顺序表为:&quot;</span>,elem);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//按位置插入元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要插入元素的位置和元素的值：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;add,&amp;elem);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;在第%d的位置插入元素%d后，顺序表为:\n&quot;</span>,add,elem);</span><br><span class="line">    t1=addTable(t1, elem, add);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//查找元素的位置</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查找元素的值：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;elem);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;查找元素%d的位置为:\n&quot;</span>,elem);</span><br><span class="line">    add=selectTable(t1, elem);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,add);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//修改元素的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的元素：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;elem);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入修改后的值：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将元素%d改为%d:\n&quot;</span>,elem,add);</span><br><span class="line">    t1=amendTable(t1, elem, add);</span><br><span class="line">    displayTable(t1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//按位置查找元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查找元素的位置：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;位置%d的元素为：&quot;</span>,add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,getTable(t1,add));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//有序顺序表的插入</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有序顺序表如下\n&quot;</span>);</span><br><span class="line">    t1.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=Size; i++) &#123;</span><br><span class="line">        t1.head[i<span class="number">-1</span>]=i;</span><br><span class="line">        t1.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    displayTable(t1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的元素值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;elem);</span><br><span class="line">    t1=insertTable(t1,elem);</span><br><span class="line">    displayTable(t1);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//有序顺序表的合并</span></span><br><span class="line">    t1.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=t1.size; i++) &#123;</span><br><span class="line">        t1.head[i<span class="number">-1</span>]=i;</span><br><span class="line">        t1.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序表A的值为：\n&quot;</span>);</span><br><span class="line">    displayTable(t1);<span class="comment">//t1为A顺序表</span></span><br><span class="line"> </span><br><span class="line">    table t2=initTable();<span class="comment">//t2为B顺序表</span></span><br><span class="line">    <span class="keyword">for</span> (i=t1.head[t1.size<span class="number">-1</span>]+<span class="number">1</span>; i&lt;=t1.size+<span class="number">5</span>; i++) &#123;</span><br><span class="line">        t2.head[i-t1.head[t1.size<span class="number">-1</span>]<span class="number">-1</span>]=i;</span><br><span class="line">        t2.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序表B的值为：\n&quot;</span>);</span><br><span class="line">    displayTable(t2);</span><br><span class="line">    table t3=initTable(); <span class="comment">//t3用来存放合并后的顺序表</span></span><br><span class="line">    t3=mergeTable(t1,t2,t3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;合并后的顺序表为：&quot;</span>);</span><br><span class="line">    displayTable(t3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function">table <span class="title">initTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t;</span><br><span class="line">    t.head=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(Size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (!t.head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.length=<span class="number">0</span>;</span><br><span class="line">    t.size=Size;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//求长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TableLength</span><span class="params">(table t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.length;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//判空函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyTable</span><span class="params">(table t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//判满</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fullTable</span><span class="params">(table t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t.length==t.size)</span><br><span class="line">        temp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class="line"><span class="function">table <span class="title">addTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断插入本身是否存在问题</span></span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length+<span class="number">1</span>||add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置有问题\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否需要申请内存空间</span></span><br><span class="line">    <span class="keyword">if</span> (fullTable(t)) &#123;</span><br><span class="line">        t.head=(<span class="keyword">int</span> *)<span class="built_in">realloc</span>(t.head, (t.size+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">if</span> (!t.head) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        t.size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后移操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=t.length<span class="number">-1</span>; i&gt;=add<span class="number">-1</span>; i--) &#123;</span><br><span class="line">        t.head[i+<span class="number">1</span>]=t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将所需插入元素，添加到顺序表的相应位置</span></span><br><span class="line">    t.head[add<span class="number">-1</span>]=elem;</span><br><span class="line">    t.length++;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//按顺序插入，找插入位置</span></span><br><span class="line"><span class="function">table <span class="title">insertTable</span><span class="params">(table t,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; t.length &amp;&amp; elem &gt;= t.head [i])<span class="comment">//从小到大排列</span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;<span class="comment">//注意i从0开始的 ，所以后面不用i - 1 ,这里的i即为下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    t=addTable(t,elem,++i);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">table <span class="title">mergeTable</span><span class="params">(table t1,table t2,table t3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;t1.length || j&lt;t2.length)&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(j == t2.length || i&lt;t1.length &amp;&amp; t1.head[i]&lt;t2.head[j])</span><br><span class="line"> </span><br><span class="line">            t3.head[k++] = t1.head[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t3.head[k++] = t2.head[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    t3.length = k;</span><br><span class="line">    <span class="keyword">return</span> t3;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">table <span class="title">delTable</span><span class="params">(table t,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length || add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;被删除元素的位置有误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=add; i&lt;t.length; i++) &#123;</span><br><span class="line">        t.head[i<span class="number">-1</span>]=t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t.length--;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//按值查找函数，其中，elem表示要查找的数据元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectTable</span><span class="params">(table t,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.head[i]==elem) &#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果查找失败，返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//按位置取元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTable</span><span class="params">(table t,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (add&gt;t.length || add&lt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;被查找元素的位置有误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t.head[add<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//更改函数，其中，elem为要更改的元素，newElem为新的数据元素</span></span><br><span class="line"><span class="function">table <span class="title">amendTable</span><span class="params">(table t,<span class="keyword">int</span> elem,<span class="keyword">int</span> newElem)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> add=selectTable(t, elem);</span><br><span class="line">    t.head[add<span class="number">-1</span>]=newElem;<span class="comment">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayTable</span><span class="params">(table t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length;i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t.head[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="五、实验运行结果"><a href="#五、实验运行结果" class="headerlink" title="五、实验运行结果"></a>五、实验运行结果</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">原顺序表：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">当前顺序表长度为：<span class="number">5</span></span><br><span class="line">当前顺序表已满</span><br><span class="line"> </span><br><span class="line">请输入要删除的元素:<span class="number">3</span></span><br><span class="line">删除<span class="number">3</span>元素后，顺序表为:<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"> </span><br><span class="line">请输入要插入元素的位置和元素的值：<span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">在第<span class="number">4</span>的位置插入元素<span class="number">5</span>后，顺序表为:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"> </span><br><span class="line">请输入要查找元素的值：<span class="number">5</span></span><br><span class="line">查找元素<span class="number">5</span>的位置为:</span><br><span class="line"><span class="number">4</span></span><br><span class="line">请输入要修改的元素：<span class="number">3</span></span><br><span class="line">请输入修改后的值：<span class="number">4</span></span><br><span class="line">将元素<span class="number">3</span>改为<span class="number">4</span>:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"> </span><br><span class="line">请输入要查找元素的位置：</span><br><span class="line"><span class="number">3</span></span><br><span class="line">位置<span class="number">3</span>的元素为：<span class="number">4</span></span><br><span class="line">有序顺序表如下</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">请输入要插入的元素值：</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">顺序表A的值为：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">顺序表B的值为：</span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">合并后的顺序表为：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line"> </span><br><span class="line">Process returned <span class="number">0</span> (<span class="number">0x0</span>)   execution time : <span class="number">18.143</span> s</span><br><span class="line">Press any key to <span class="keyword">continue</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实验：顺序表的应用&quot;&gt;&lt;a href=&quot;#实验：顺序表的应用&quot; class=&quot;headerlink&quot; title=&quot;实验：顺序表的应用&quot;&gt;&lt;/a&gt;实验：顺序表的应用&lt;/h1&gt;&lt;h2 id=&quot;一、实验目的&quot;&gt;&lt;a href=&quot;#一、实验目的&quot; class=&quot;head</summary>
      
    
    
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="C语言" scheme="https://blog.dhbxs.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法与数据结构" scheme="https://blog.dhbxs.top/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
